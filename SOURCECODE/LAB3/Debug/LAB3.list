
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd0  08002dd0  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd0  08002dd0  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd0  08002dd0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd0  08002dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000040  08002e18  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002e18  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094c0  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a13  00000000  00000000  00029529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002ba98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016725  00000000  00000000  0002c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b839  00000000  00000000  00042c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082727  00000000  00000000  0004e466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0b8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d58  00000000  00000000  000d0be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d94 	.word	0x08002d94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002d94 	.word	0x08002d94

0800014c <sevenLEDvalueToDisplay>:
enum AUTO2 currM1State2=A_GREEN2;
int counterTraffic[]={5,3};

int lightSeconds[]={5,2,3};
int lightSeconds_temp[]={5,2,3};//red yellow green
void sevenLEDvalueToDisplay(int index,int value){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	if(value>99){
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	2b63      	cmp	r3, #99	; 0x63
 800015a:	dc36      	bgt.n	80001ca <sevenLEDvalueToDisplay+0x7e>
		return;
	}
	switch(index){
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d003      	beq.n	800016a <sevenLEDvalueToDisplay+0x1e>
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d018      	beq.n	800019a <sevenLEDvalueToDisplay+0x4e>
	case 1:
		sevenLEDdisplayBuffer[2]=value/10;
		sevenLEDdisplayBuffer[3]=value%10;
		break;
	default:
		break;
 8000168:	e030      	b.n	80001cc <sevenLEDvalueToDisplay+0x80>
		sevenLEDdisplayBuffer[0]=value/10;
 800016a:	683b      	ldr	r3, [r7, #0]
 800016c:	4a19      	ldr	r2, [pc, #100]	; (80001d4 <sevenLEDvalueToDisplay+0x88>)
 800016e:	fb82 1203 	smull	r1, r2, r2, r3
 8000172:	1092      	asrs	r2, r2, #2
 8000174:	17db      	asrs	r3, r3, #31
 8000176:	1ad3      	subs	r3, r2, r3
 8000178:	4a17      	ldr	r2, [pc, #92]	; (80001d8 <sevenLEDvalueToDisplay+0x8c>)
 800017a:	6013      	str	r3, [r2, #0]
		sevenLEDdisplayBuffer[1]=value%10;
 800017c:	6839      	ldr	r1, [r7, #0]
 800017e:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <sevenLEDvalueToDisplay+0x88>)
 8000180:	fb83 2301 	smull	r2, r3, r3, r1
 8000184:	109a      	asrs	r2, r3, #2
 8000186:	17cb      	asrs	r3, r1, #31
 8000188:	1ad2      	subs	r2, r2, r3
 800018a:	4613      	mov	r3, r2
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	4413      	add	r3, r2
 8000190:	005b      	lsls	r3, r3, #1
 8000192:	1aca      	subs	r2, r1, r3
 8000194:	4b10      	ldr	r3, [pc, #64]	; (80001d8 <sevenLEDvalueToDisplay+0x8c>)
 8000196:	605a      	str	r2, [r3, #4]
		break;
 8000198:	e018      	b.n	80001cc <sevenLEDvalueToDisplay+0x80>
		sevenLEDdisplayBuffer[2]=value/10;
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <sevenLEDvalueToDisplay+0x88>)
 800019e:	fb82 1203 	smull	r1, r2, r2, r3
 80001a2:	1092      	asrs	r2, r2, #2
 80001a4:	17db      	asrs	r3, r3, #31
 80001a6:	1ad3      	subs	r3, r2, r3
 80001a8:	4a0b      	ldr	r2, [pc, #44]	; (80001d8 <sevenLEDvalueToDisplay+0x8c>)
 80001aa:	6093      	str	r3, [r2, #8]
		sevenLEDdisplayBuffer[3]=value%10;
 80001ac:	6839      	ldr	r1, [r7, #0]
 80001ae:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <sevenLEDvalueToDisplay+0x88>)
 80001b0:	fb83 2301 	smull	r2, r3, r3, r1
 80001b4:	109a      	asrs	r2, r3, #2
 80001b6:	17cb      	asrs	r3, r1, #31
 80001b8:	1ad2      	subs	r2, r2, r3
 80001ba:	4613      	mov	r3, r2
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	4413      	add	r3, r2
 80001c0:	005b      	lsls	r3, r3, #1
 80001c2:	1aca      	subs	r2, r1, r3
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <sevenLEDvalueToDisplay+0x8c>)
 80001c6:	60da      	str	r2, [r3, #12]
		break;
 80001c8:	e000      	b.n	80001cc <sevenLEDvalueToDisplay+0x80>
		return;
 80001ca:	bf00      	nop
	}
}
 80001cc:	370c      	adds	r7, #12
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	66666667 	.word	0x66666667
 80001d8:	20000000 	.word	0x20000000

080001dc <resetBuffer_lightSeconds>:
void resetBuffer_lightSeconds(){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
	for(int i=0;i<3;i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e00a      	b.n	80001fe <resetBuffer_lightSeconds+0x22>
		lightSeconds_temp[i]=lightSeconds[i];
 80001e8:	4a09      	ldr	r2, [pc, #36]	; (8000210 <resetBuffer_lightSeconds+0x34>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	4908      	ldr	r1, [pc, #32]	; (8000214 <resetBuffer_lightSeconds+0x38>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<3;i++){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b02      	cmp	r3, #2
 8000202:	ddf1      	ble.n	80001e8 <resetBuffer_lightSeconds+0xc>
	}
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	2000001c 	.word	0x2000001c
 8000214:	20000028 	.word	0x20000028

08000218 <saveBuffer_lightSeconds>:
void saveBuffer_lightSeconds(){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	for(int i=0;i<3;i++){
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e00a      	b.n	800023a <saveBuffer_lightSeconds+0x22>
		lightSeconds[i]=lightSeconds_temp[i];
 8000224:	4a09      	ldr	r2, [pc, #36]	; (800024c <saveBuffer_lightSeconds+0x34>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	4908      	ldr	r1, [pc, #32]	; (8000250 <saveBuffer_lightSeconds+0x38>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<3;i++){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b02      	cmp	r3, #2
 800023e:	ddf1      	ble.n	8000224 <saveBuffer_lightSeconds+0xc>
	}
}
 8000240:	bf00      	nop
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	20000028 	.word	0x20000028
 8000250:	2000001c 	.word	0x2000001c

08000254 <update_counterTraffic_to_Buffer>:

void update_counterTraffic_to_Buffer(){
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	sevenLEDdisplayBuffer[0]=counterTraffic[0]/10;
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <update_counterTraffic_to_Buffer+0x70>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <update_counterTraffic_to_Buffer+0x74>)
 800025e:	fb82 1203 	smull	r1, r2, r2, r3
 8000262:	1092      	asrs	r2, r2, #2
 8000264:	17db      	asrs	r3, r3, #31
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	4a18      	ldr	r2, [pc, #96]	; (80002cc <update_counterTraffic_to_Buffer+0x78>)
 800026a:	6013      	str	r3, [r2, #0]
	sevenLEDdisplayBuffer[1]=counterTraffic[0]%10;
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <update_counterTraffic_to_Buffer+0x70>)
 800026e:	6819      	ldr	r1, [r3, #0]
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <update_counterTraffic_to_Buffer+0x74>)
 8000272:	fb83 2301 	smull	r2, r3, r3, r1
 8000276:	109a      	asrs	r2, r3, #2
 8000278:	17cb      	asrs	r3, r1, #31
 800027a:	1ad2      	subs	r2, r2, r3
 800027c:	4613      	mov	r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	4413      	add	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	1aca      	subs	r2, r1, r3
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <update_counterTraffic_to_Buffer+0x78>)
 8000288:	605a      	str	r2, [r3, #4]
	sevenLEDdisplayBuffer[2]=counterTraffic[1]/10;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <update_counterTraffic_to_Buffer+0x70>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <update_counterTraffic_to_Buffer+0x74>)
 8000290:	fb82 1203 	smull	r1, r2, r2, r3
 8000294:	1092      	asrs	r2, r2, #2
 8000296:	17db      	asrs	r3, r3, #31
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <update_counterTraffic_to_Buffer+0x78>)
 800029c:	6093      	str	r3, [r2, #8]
	sevenLEDdisplayBuffer[3]=counterTraffic[1]%10;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <update_counterTraffic_to_Buffer+0x70>)
 80002a0:	6859      	ldr	r1, [r3, #4]
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <update_counterTraffic_to_Buffer+0x74>)
 80002a4:	fb83 2301 	smull	r2, r3, r3, r1
 80002a8:	109a      	asrs	r2, r3, #2
 80002aa:	17cb      	asrs	r3, r1, #31
 80002ac:	1ad2      	subs	r2, r2, r3
 80002ae:	4613      	mov	r3, r2
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	1aca      	subs	r2, r1, r3
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <update_counterTraffic_to_Buffer+0x78>)
 80002ba:	60da      	str	r2, [r3, #12]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	20000014 	.word	0x20000014
 80002c8:	66666667 	.word	0x66666667
 80002cc:	20000000 	.word	0x20000000

080002d0 <update_lightSeconds_to_counterTraffic>:
void update_lightSeconds_to_counterTraffic(){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	counterTraffic[0]=lightSeconds[0];
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <update_lightSeconds_to_counterTraffic+0x1c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <update_lightSeconds_to_counterTraffic+0x20>)
 80002da:	6013      	str	r3, [r2, #0]
	counterTraffic[1]=lightSeconds[2];
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <update_lightSeconds_to_counterTraffic+0x1c>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	4a03      	ldr	r2, [pc, #12]	; (80002f0 <update_lightSeconds_to_counterTraffic+0x20>)
 80002e2:	6053      	str	r3, [r2, #4]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	2000001c 	.word	0x2000001c
 80002f0:	20000014 	.word	0x20000014

080002f4 <init_for_automatic_leds>:
void init_for_automatic_leds(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	OffAllLED();
 80002f8:	f000 ff72 	bl	80011e0 <OffAllLED>
	OnRed1();
 80002fc:	f000 fee0 	bl	80010c0 <OnRed1>
	OnGreen2();
 8000300:	f000 ff3e 	bl	8001180 <OnGreen2>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <fsm_for_automatic_leds>:
void fsm_for_automatic_leds() {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    if (timer_flag[3] == 1) {
 800030c:	4b3a      	ldr	r3, [pc, #232]	; (80003f8 <fsm_for_automatic_leds+0xf0>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d16c      	bne.n	80003ee <fsm_for_automatic_leds+0xe6>
        setTimer(3, 100);
 8000314:	2164      	movs	r1, #100	; 0x64
 8000316:	2003      	movs	r0, #3
 8000318:	f001 f91e 	bl	8001558 <setTimer>
        counterTraffic[0]--;
 800031c:	4b37      	ldr	r3, [pc, #220]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3b01      	subs	r3, #1
 8000322:	4a36      	ldr	r2, [pc, #216]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 8000324:	6013      	str	r3, [r2, #0]
        counterTraffic[1]--;
 8000326:	4b35      	ldr	r3, [pc, #212]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	4a33      	ldr	r2, [pc, #204]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 800032e:	6053      	str	r3, [r2, #4]

        if (counterTraffic[0] == 0) {
 8000330:	4b32      	ldr	r3, [pc, #200]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d12a      	bne.n	800038e <fsm_for_automatic_leds+0x86>
        	OffAllLED1();
 8000338:	f000 ff62 	bl	8001200 <OffAllLED1>
            switch (currM1State1) {
 800033c:	4b30      	ldr	r3, [pc, #192]	; (8000400 <fsm_for_automatic_leds+0xf8>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b02      	cmp	r3, #2
 8000342:	d010      	beq.n	8000366 <fsm_for_automatic_leds+0x5e>
 8000344:	2b02      	cmp	r3, #2
 8000346:	dc23      	bgt.n	8000390 <fsm_for_automatic_leds+0x88>
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <fsm_for_automatic_leds+0x4a>
 800034c:	2b01      	cmp	r3, #1
 800034e:	d014      	beq.n	800037a <fsm_for_automatic_leds+0x72>
 8000350:	e01e      	b.n	8000390 <fsm_for_automatic_leds+0x88>
                case A_RED1:
                    currM1State1 = A_GREEN1;
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <fsm_for_automatic_leds+0xf8>)
 8000354:	2202      	movs	r2, #2
 8000356:	701a      	strb	r2, [r3, #0]
                    counterTraffic[0] = lightSeconds[2];
 8000358:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <fsm_for_automatic_leds+0xfc>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a27      	ldr	r2, [pc, #156]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 800035e:	6013      	str	r3, [r2, #0]
                    OnGreen1();
 8000360:	f000 fec6 	bl	80010f0 <OnGreen1>
                    break;
 8000364:	e014      	b.n	8000390 <fsm_for_automatic_leds+0x88>
                case A_GREEN1:
                    currM1State1 = A_YELLOW1;
 8000366:	4b26      	ldr	r3, [pc, #152]	; (8000400 <fsm_for_automatic_leds+0xf8>)
 8000368:	2201      	movs	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
                    counterTraffic[0] = lightSeconds[1];
 800036c:	4b25      	ldr	r3, [pc, #148]	; (8000404 <fsm_for_automatic_leds+0xfc>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 8000372:	6013      	str	r3, [r2, #0]
                    OnYellow1();
 8000374:	f000 feb0 	bl	80010d8 <OnYellow1>
                    break;
 8000378:	e00a      	b.n	8000390 <fsm_for_automatic_leds+0x88>
                case A_YELLOW1:
                    currM1State1 = A_RED1;
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <fsm_for_automatic_leds+0xf8>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
                    counterTraffic[0] = lightSeconds[0];
 8000380:	4b20      	ldr	r3, [pc, #128]	; (8000404 <fsm_for_automatic_leds+0xfc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a1d      	ldr	r2, [pc, #116]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 8000386:	6013      	str	r3, [r2, #0]
                    OnRed1();
 8000388:	f000 fe9a 	bl	80010c0 <OnRed1>
                    break;
 800038c:	e000      	b.n	8000390 <fsm_for_automatic_leds+0x88>
            }
        }
 800038e:	bf00      	nop

        if (counterTraffic[1] == 0) {
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d12a      	bne.n	80003ee <fsm_for_automatic_leds+0xe6>
        	OffAllLED2();
 8000398:	f000 ff3c 	bl	8001214 <OffAllLED2>
            switch (currM1State2) {
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <fsm_for_automatic_leds+0x100>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d010      	beq.n	80003c6 <fsm_for_automatic_leds+0xbe>
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	dc23      	bgt.n	80003f0 <fsm_for_automatic_leds+0xe8>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <fsm_for_automatic_leds+0xaa>
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d014      	beq.n	80003da <fsm_for_automatic_leds+0xd2>
 80003b0:	e01e      	b.n	80003f0 <fsm_for_automatic_leds+0xe8>
                case A_RED2:
                    currM1State2 = A_GREEN2;
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <fsm_for_automatic_leds+0x100>)
 80003b4:	2202      	movs	r2, #2
 80003b6:	701a      	strb	r2, [r3, #0]
                    counterTraffic[1] = lightSeconds[2];
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <fsm_for_automatic_leds+0xfc>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 80003be:	6053      	str	r3, [r2, #4]
                    OnGreen2();
 80003c0:	f000 fede 	bl	8001180 <OnGreen2>
                    break;
 80003c4:	e014      	b.n	80003f0 <fsm_for_automatic_leds+0xe8>
                case A_GREEN2:
                    currM1State2 = A_YELLOW2;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <fsm_for_automatic_leds+0x100>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	701a      	strb	r2, [r3, #0]
                    counterTraffic[1] = lightSeconds[1];
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <fsm_for_automatic_leds+0xfc>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 80003d2:	6053      	str	r3, [r2, #4]
                    OnYellow2();
 80003d4:	f000 fec8 	bl	8001168 <OnYellow2>
                    break;
 80003d8:	e00a      	b.n	80003f0 <fsm_for_automatic_leds+0xe8>
                case A_YELLOW2:
                    currM1State2 = A_RED2;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <fsm_for_automatic_leds+0x100>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
                    counterTraffic[1] = lightSeconds[0];
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <fsm_for_automatic_leds+0xfc>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a05      	ldr	r2, [pc, #20]	; (80003fc <fsm_for_automatic_leds+0xf4>)
 80003e6:	6053      	str	r3, [r2, #4]
                    OnRed2();
 80003e8:	f000 feb2 	bl	8001150 <OnRed2>
                    break;
 80003ec:	e000      	b.n	80003f0 <fsm_for_automatic_leds+0xe8>
            }
        }
 80003ee:	bf00      	nop
    }
    //updateM1LEDS();
    update_counterTraffic_to_Buffer();
 80003f0:	f7ff ff30 	bl	8000254 <update_counterTraffic_to_Buffer>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200000b0 	.word	0x200000b0
 80003fc:	20000014 	.word	0x20000014
 8000400:	2000005d 	.word	0x2000005d
 8000404:	2000001c 	.word	0x2000001c
 8000408:	20000010 	.word	0x20000010

0800040c <fsm_for_input_processing>:

void fsm_for_input_processing(void){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	button_reading(0);
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f96d 	bl	80006f0 <button_reading>
	button_reading(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f000 f96a 	bl	80006f0 <button_reading>
	button_reading(2);
 800041c:	2002      	movs	r0, #2
 800041e:	f000 f967 	bl	80006f0 <button_reading>
	if(timer_flag[1]==1){
 8000422:	4b9f      	ldr	r3, [pc, #636]	; (80006a0 <fsm_for_input_processing+0x294>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	2b01      	cmp	r3, #1
 8000428:	f040 8135 	bne.w	8000696 <fsm_for_input_processing+0x28a>
		setTimer(1,15);
 800042c:	210f      	movs	r1, #15
 800042e:	2001      	movs	r0, #1
 8000430:	f001 f892 	bl	8001558 <setTimer>
		switch(currMode){
 8000434:	4b9b      	ldr	r3, [pc, #620]	; (80006a4 <fsm_for_input_processing+0x298>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b03      	cmp	r3, #3
 800043a:	f200 812d 	bhi.w	8000698 <fsm_for_input_processing+0x28c>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_for_input_processing+0x38>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000455 	.word	0x08000455
 8000448:	08000495 	.word	0x08000495
 800044c:	08000547 	.word	0x08000547
 8000450:	080005f9 	.word	0x080005f9
		case MODE1:
			if(is_button_pressed(0)||is_button_pressed_1s(0)){
 8000454:	2000      	movs	r0, #0
 8000456:	f000 fa2d 	bl	80008b4 <is_button_pressed>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d105      	bne.n	800046c <fsm_for_input_processing+0x60>
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fa41 	bl	80008e8 <is_button_pressed_1s>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d010      	beq.n	800048e <fsm_for_input_processing+0x82>
				currMode = MODE2;
 800046c:	4b8d      	ldr	r3, [pc, #564]	; (80006a4 <fsm_for_input_processing+0x298>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
				sevenLEDvalueToDisplay(0,2);
 8000472:	2102      	movs	r1, #2
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff fe69 	bl	800014c <sevenLEDvalueToDisplay>
				sevenLEDvalueToDisplay(1,lightSeconds[0]);
 800047a:	4b8b      	ldr	r3, [pc, #556]	; (80006a8 <fsm_for_input_processing+0x29c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4619      	mov	r1, r3
 8000480:	2001      	movs	r0, #1
 8000482:	f7ff fe63 	bl	800014c <sevenLEDvalueToDisplay>
				OffAllLED();
 8000486:	f000 feab 	bl	80011e0 <OffAllLED>
				//ToggleAllRed();
				resetBuffer_lightSeconds();
 800048a:	f7ff fea7 	bl	80001dc <resetBuffer_lightSeconds>
			}
			 fsm_for_automatic_leds();//////////////fsm for automatic leds
 800048e:	f7ff ff3b 	bl	8000308 <fsm_for_automatic_leds>
			break;
 8000492:	e101      	b.n	8000698 <fsm_for_input_processing+0x28c>
		case MODE2:
			if(is_button_pressed(0)||is_button_pressed_1s(0)){
 8000494:	2000      	movs	r0, #0
 8000496:	f000 fa0d 	bl	80008b4 <is_button_pressed>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d105      	bne.n	80004ac <fsm_for_input_processing+0xa0>
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fa21 	bl	80008e8 <is_button_pressed_1s>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d010      	beq.n	80004ce <fsm_for_input_processing+0xc2>
				currMode = MODE3;
 80004ac:	4b7d      	ldr	r3, [pc, #500]	; (80006a4 <fsm_for_input_processing+0x298>)
 80004ae:	2202      	movs	r2, #2
 80004b0:	701a      	strb	r2, [r3, #0]
				sevenLEDvalueToDisplay(0,3);
 80004b2:	2103      	movs	r1, #3
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff fe49 	bl	800014c <sevenLEDvalueToDisplay>
				sevenLEDvalueToDisplay(1,lightSeconds[1]);
 80004ba:	4b7b      	ldr	r3, [pc, #492]	; (80006a8 <fsm_for_input_processing+0x29c>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	4619      	mov	r1, r3
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff fe43 	bl	800014c <sevenLEDvalueToDisplay>
				OffAllLED();
 80004c6:	f000 fe8b 	bl	80011e0 <OffAllLED>
				//ToggleAllYellow();
				resetBuffer_lightSeconds();
 80004ca:	f7ff fe87 	bl	80001dc <resetBuffer_lightSeconds>
			}
			if(is_button_pressed(1)||is_button_pressed_1s(1)){
 80004ce:	2001      	movs	r0, #1
 80004d0:	f000 f9f0 	bl	80008b4 <is_button_pressed>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d105      	bne.n	80004e6 <fsm_for_input_processing+0xda>
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 fa04 	bl	80008e8 <is_button_pressed_1s>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d011      	beq.n	800050a <fsm_for_input_processing+0xfe>
				lightSeconds_temp[0]+=1;
 80004e6:	4b71      	ldr	r3, [pc, #452]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	4a6f      	ldr	r2, [pc, #444]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80004ee:	6013      	str	r3, [r2, #0]
				if(lightSeconds_temp[0]>99){
 80004f0:	4b6e      	ldr	r3, [pc, #440]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b63      	cmp	r3, #99	; 0x63
 80004f6:	dd02      	ble.n	80004fe <fsm_for_input_processing+0xf2>
					lightSeconds_temp[0]=1;
 80004f8:	4b6c      	ldr	r3, [pc, #432]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
				}
				sevenLEDvalueToDisplay(1,lightSeconds_temp[0]);
 80004fe:	4b6b      	ldr	r3, [pc, #428]	; (80006ac <fsm_for_input_processing+0x2a0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4619      	mov	r1, r3
 8000504:	2001      	movs	r0, #1
 8000506:	f7ff fe21 	bl	800014c <sevenLEDvalueToDisplay>
			}
			if(is_button_pressed(2)||is_button_pressed_1s(2)){
 800050a:	2002      	movs	r0, #2
 800050c:	f000 f9d2 	bl	80008b4 <is_button_pressed>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d105      	bne.n	8000522 <fsm_for_input_processing+0x116>
 8000516:	2002      	movs	r0, #2
 8000518:	f000 f9e6 	bl	80008e8 <is_button_pressed_1s>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <fsm_for_input_processing+0x124>
				currMode = MODE1;
 8000522:	4b60      	ldr	r3, [pc, #384]	; (80006a4 <fsm_for_input_processing+0x298>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
				saveBuffer_lightSeconds();
 8000528:	f7ff fe76 	bl	8000218 <saveBuffer_lightSeconds>

				M1_transition_function();
 800052c:	f000 f8c0 	bl	80006b0 <M1_transition_function>
			}
			sevenLEDvalueToDisplay(0,2);
 8000530:	2102      	movs	r1, #2
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff fe0a 	bl	800014c <sevenLEDvalueToDisplay>
			sevenLEDvalueToDisplay(1,lightSeconds_temp[0]);
 8000538:	4b5c      	ldr	r3, [pc, #368]	; (80006ac <fsm_for_input_processing+0x2a0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff fe04 	bl	800014c <sevenLEDvalueToDisplay>
			break;
 8000544:	e0a8      	b.n	8000698 <fsm_for_input_processing+0x28c>
		case MODE3:
			if(is_button_pressed(0)||is_button_pressed_1s(0)){
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f9b4 	bl	80008b4 <is_button_pressed>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d105      	bne.n	800055e <fsm_for_input_processing+0x152>
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f9c8 	bl	80008e8 <is_button_pressed_1s>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d010      	beq.n	8000580 <fsm_for_input_processing+0x174>
				currMode = MODE4;
 800055e:	4b51      	ldr	r3, [pc, #324]	; (80006a4 <fsm_for_input_processing+0x298>)
 8000560:	2203      	movs	r2, #3
 8000562:	701a      	strb	r2, [r3, #0]
				sevenLEDvalueToDisplay(0,4);
 8000564:	2104      	movs	r1, #4
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff fdf0 	bl	800014c <sevenLEDvalueToDisplay>
				sevenLEDvalueToDisplay(1,lightSeconds[2]);
 800056c:	4b4e      	ldr	r3, [pc, #312]	; (80006a8 <fsm_for_input_processing+0x29c>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4619      	mov	r1, r3
 8000572:	2001      	movs	r0, #1
 8000574:	f7ff fdea 	bl	800014c <sevenLEDvalueToDisplay>
				OffAllLED();
 8000578:	f000 fe32 	bl	80011e0 <OffAllLED>
				//ToggleAllGreen();
				resetBuffer_lightSeconds();
 800057c:	f7ff fe2e 	bl	80001dc <resetBuffer_lightSeconds>
			}
			if(is_button_pressed(1)||is_button_pressed_1s(1)){
 8000580:	2001      	movs	r0, #1
 8000582:	f000 f997 	bl	80008b4 <is_button_pressed>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d105      	bne.n	8000598 <fsm_for_input_processing+0x18c>
 800058c:	2001      	movs	r0, #1
 800058e:	f000 f9ab 	bl	80008e8 <is_button_pressed_1s>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d011      	beq.n	80005bc <fsm_for_input_processing+0x1b0>
				lightSeconds_temp[1]+=1;
 8000598:	4b44      	ldr	r3, [pc, #272]	; (80006ac <fsm_for_input_processing+0x2a0>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	4a43      	ldr	r2, [pc, #268]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80005a0:	6053      	str	r3, [r2, #4]
				if(lightSeconds_temp[1]>99){
 80005a2:	4b42      	ldr	r3, [pc, #264]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	2b63      	cmp	r3, #99	; 0x63
 80005a8:	dd02      	ble.n	80005b0 <fsm_for_input_processing+0x1a4>
					lightSeconds_temp[1]=1;
 80005aa:	4b40      	ldr	r3, [pc, #256]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	605a      	str	r2, [r3, #4]
				}
				sevenLEDvalueToDisplay(1,lightSeconds_temp[1]);
 80005b0:	4b3e      	ldr	r3, [pc, #248]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	4619      	mov	r1, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	f7ff fdc8 	bl	800014c <sevenLEDvalueToDisplay>
			}
			if(is_button_pressed(2)||is_button_pressed_1s(2)){
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 f979 	bl	80008b4 <is_button_pressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d105      	bne.n	80005d4 <fsm_for_input_processing+0x1c8>
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 f98d 	bl	80008e8 <is_button_pressed_1s>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d006      	beq.n	80005e2 <fsm_for_input_processing+0x1d6>
				currMode = MODE1;
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <fsm_for_input_processing+0x298>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
				saveBuffer_lightSeconds();
 80005da:	f7ff fe1d 	bl	8000218 <saveBuffer_lightSeconds>

				M1_transition_function();
 80005de:	f000 f867 	bl	80006b0 <M1_transition_function>
			}
			sevenLEDvalueToDisplay(0,3);
 80005e2:	2103      	movs	r1, #3
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff fdb1 	bl	800014c <sevenLEDvalueToDisplay>
			sevenLEDvalueToDisplay(1,lightSeconds_temp[1]);
 80005ea:	4b30      	ldr	r3, [pc, #192]	; (80006ac <fsm_for_input_processing+0x2a0>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4619      	mov	r1, r3
 80005f0:	2001      	movs	r0, #1
 80005f2:	f7ff fdab 	bl	800014c <sevenLEDvalueToDisplay>
			break;
 80005f6:	e04f      	b.n	8000698 <fsm_for_input_processing+0x28c>
		case MODE4:
			if(is_button_pressed(0)||is_button_pressed_1s(0)){
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 f95b 	bl	80008b4 <is_button_pressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d105      	bne.n	8000610 <fsm_for_input_processing+0x204>
 8000604:	2000      	movs	r0, #0
 8000606:	f000 f96f 	bl	80008e8 <is_button_pressed_1s>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d006      	beq.n	800061e <fsm_for_input_processing+0x212>
				currMode = MODE1;
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <fsm_for_input_processing+0x298>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
				resetBuffer_lightSeconds();
 8000616:	f7ff fde1 	bl	80001dc <resetBuffer_lightSeconds>

				M1_transition_function();
 800061a:	f000 f849 	bl	80006b0 <M1_transition_function>
			}
			if(is_button_pressed(1)||is_button_pressed_1s(1)){
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f948 	bl	80008b4 <is_button_pressed>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d105      	bne.n	8000636 <fsm_for_input_processing+0x22a>
 800062a:	2001      	movs	r0, #1
 800062c:	f000 f95c 	bl	80008e8 <is_button_pressed_1s>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d011      	beq.n	800065a <fsm_for_input_processing+0x24e>
				lightSeconds_temp[2]+=1;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <fsm_for_input_processing+0x2a0>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	3301      	adds	r3, #1
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <fsm_for_input_processing+0x2a0>)
 800063e:	6093      	str	r3, [r2, #8]
				if(lightSeconds_temp[2]>99){
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <fsm_for_input_processing+0x2a0>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	2b63      	cmp	r3, #99	; 0x63
 8000646:	dd02      	ble.n	800064e <fsm_for_input_processing+0x242>
					lightSeconds_temp[2]=1;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <fsm_for_input_processing+0x2a0>)
 800064a:	2201      	movs	r2, #1
 800064c:	609a      	str	r2, [r3, #8]
				}
				sevenLEDvalueToDisplay(1,lightSeconds_temp[2]);
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <fsm_for_input_processing+0x2a0>)
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	4619      	mov	r1, r3
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff fd79 	bl	800014c <sevenLEDvalueToDisplay>
			}
			if(is_button_pressed(2)||is_button_pressed_1s(2)){
 800065a:	2002      	movs	r0, #2
 800065c:	f000 f92a 	bl	80008b4 <is_button_pressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d105      	bne.n	8000672 <fsm_for_input_processing+0x266>
 8000666:	2002      	movs	r0, #2
 8000668:	f000 f93e 	bl	80008e8 <is_button_pressed_1s>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <fsm_for_input_processing+0x274>
				currMode = MODE1;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <fsm_for_input_processing+0x298>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
				saveBuffer_lightSeconds();
 8000678:	f7ff fdce 	bl	8000218 <saveBuffer_lightSeconds>

				M1_transition_function();
 800067c:	f000 f818 	bl	80006b0 <M1_transition_function>
			}

			sevenLEDvalueToDisplay(0,4);
 8000680:	2104      	movs	r1, #4
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff fd62 	bl	800014c <sevenLEDvalueToDisplay>
			sevenLEDvalueToDisplay(1,lightSeconds_temp[2]);
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <fsm_for_input_processing+0x2a0>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	4619      	mov	r1, r3
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fd5c 	bl	800014c <sevenLEDvalueToDisplay>
			break;
 8000694:	e000      	b.n	8000698 <fsm_for_input_processing+0x28c>
		}
	}
 8000696:	bf00      	nop

	TimerInterupt();
 8000698:	f000 fdf0 	bl	800127c <TimerInterupt>

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000b0 	.word	0x200000b0
 80006a4:	2000005c 	.word	0x2000005c
 80006a8:	2000001c 	.word	0x2000001c
 80006ac:	20000028 	.word	0x20000028

080006b0 <M1_transition_function>:
void M1_transition_function(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	update_lightSeconds_to_counterTraffic();
 80006b4:	f7ff fe0c 	bl	80002d0 <update_lightSeconds_to_counterTraffic>
	currM1State1=A_RED1;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <M1_transition_function+0x34>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	currM1State2=A_GREEN2;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <M1_transition_function+0x38>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	701a      	strb	r2, [r3, #0]
	sevenLEDvalueToDisplay(0,counterTraffic[0]);
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <M1_transition_function+0x3c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fd3e 	bl	800014c <sevenLEDvalueToDisplay>
	sevenLEDvalueToDisplay(1,counterTraffic[2]);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <M1_transition_function+0x3c>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff fd38 	bl	800014c <sevenLEDvalueToDisplay>
	init_for_automatic_leds();
 80006dc:	f7ff fe0a 	bl	80002f4 <init_for_automatic_leds>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000005d 	.word	0x2000005d
 80006e8:	20000010 	.word	0x20000010
 80006ec:	20000014 	.word	0x20000014

080006f0 <button_reading>:
//we define a flag for a button pressed more than 1 second.
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(int index){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	switch(index){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	f000 8085 	beq.w	800080a <button_reading+0x11a>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b02      	cmp	r3, #2
 8000704:	f300 80be 	bgt.w	8000884 <button_reading+0x194>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <button_reading+0x26>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d03d      	beq.n	8000790 <button_reading+0xa0>
				counterForButtonPress1s[2] = 0;
				flagForButtonPress1s[2] = 0;
			}
		break;
	default:
		break;
 8000714:	e0b6      	b.n	8000884 <button_reading+0x194>
		debounceButtonBuffer5[0] =debounceButtonBuffer4[0];
 8000716:	4b5e      	ldr	r3, [pc, #376]	; (8000890 <button_reading+0x1a0>)
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	4b5e      	ldr	r3, [pc, #376]	; (8000894 <button_reading+0x1a4>)
 800071c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer4[0] =debounceButtonBuffer3[0];
 800071e:	4b5e      	ldr	r3, [pc, #376]	; (8000898 <button_reading+0x1a8>)
 8000720:	781a      	ldrb	r2, [r3, #0]
 8000722:	4b5b      	ldr	r3, [pc, #364]	; (8000890 <button_reading+0x1a0>)
 8000724:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer3[0] =debounceButtonBuffer2[0];
 8000726:	4b5d      	ldr	r3, [pc, #372]	; (800089c <button_reading+0x1ac>)
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	4b5b      	ldr	r3, [pc, #364]	; (8000898 <button_reading+0x1a8>)
 800072c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[0] =debounceButtonBuffer1[0];
 800072e:	4b5c      	ldr	r3, [pc, #368]	; (80008a0 <button_reading+0x1b0>)
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	4b5a      	ldr	r3, [pc, #360]	; (800089c <button_reading+0x1ac>)
 8000734:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	485a      	ldr	r0, [pc, #360]	; (80008a4 <button_reading+0x1b4>)
 800073c:	f001 faf2 	bl	8001d24 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b56      	ldr	r3, [pc, #344]	; (80008a0 <button_reading+0x1b0>)
 8000746:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[0] == debounceButtonBuffer2[0])
 8000748:	4b55      	ldr	r3, [pc, #340]	; (80008a0 <button_reading+0x1b0>)
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	4b53      	ldr	r3, [pc, #332]	; (800089c <button_reading+0x1ac>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d103      	bne.n	800075c <button_reading+0x6c>
			buttonBuffer[0] = debounceButtonBuffer1[0];
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <button_reading+0x1b0>)
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <button_reading+0x1b8>)
 800075a:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[0] == BUTTON_IS_PRESSED){
 800075c:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <button_reading+0x1b8>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d10e      	bne.n	8000782 <button_reading+0x92>
				if(counterForButtonPress1s[0] < DURATION_FOR_AUTO_INCREASING){
 8000764:	4b51      	ldr	r3, [pc, #324]	; (80008ac <button_reading+0x1bc>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2b63      	cmp	r3, #99	; 0x63
 800076a:	d806      	bhi.n	800077a <button_reading+0x8a>
					counterForButtonPress1s[0]++;
 800076c:	4b4f      	ldr	r3, [pc, #316]	; (80008ac <button_reading+0x1bc>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <button_reading+0x1bc>)
 8000776:	801a      	strh	r2, [r3, #0]
		break;
 8000778:	e085      	b.n	8000886 <button_reading+0x196>
					flagForButtonPress1s[0] = 1;
 800077a:	4b4d      	ldr	r3, [pc, #308]	; (80008b0 <button_reading+0x1c0>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
		break;
 8000780:	e081      	b.n	8000886 <button_reading+0x196>
				counterForButtonPress1s[0] = 0;
 8000782:	4b4a      	ldr	r3, [pc, #296]	; (80008ac <button_reading+0x1bc>)
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
				flagForButtonPress1s[0] = 0;
 8000788:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <button_reading+0x1c0>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
		break;
 800078e:	e07a      	b.n	8000886 <button_reading+0x196>
		debounceButtonBuffer5[1] =debounceButtonBuffer4[1];
 8000790:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <button_reading+0x1a0>)
 8000792:	785a      	ldrb	r2, [r3, #1]
 8000794:	4b3f      	ldr	r3, [pc, #252]	; (8000894 <button_reading+0x1a4>)
 8000796:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer4[1] =debounceButtonBuffer3[1];
 8000798:	4b3f      	ldr	r3, [pc, #252]	; (8000898 <button_reading+0x1a8>)
 800079a:	785a      	ldrb	r2, [r3, #1]
 800079c:	4b3c      	ldr	r3, [pc, #240]	; (8000890 <button_reading+0x1a0>)
 800079e:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer3[1] =debounceButtonBuffer2[1];
 80007a0:	4b3e      	ldr	r3, [pc, #248]	; (800089c <button_reading+0x1ac>)
 80007a2:	785a      	ldrb	r2, [r3, #1]
 80007a4:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <button_reading+0x1a8>)
 80007a6:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer2[1] =debounceButtonBuffer1[1];
 80007a8:	4b3d      	ldr	r3, [pc, #244]	; (80008a0 <button_reading+0x1b0>)
 80007aa:	785a      	ldrb	r2, [r3, #1]
 80007ac:	4b3b      	ldr	r3, [pc, #236]	; (800089c <button_reading+0x1ac>)
 80007ae:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	483b      	ldr	r0, [pc, #236]	; (80008a4 <button_reading+0x1b4>)
 80007b6:	f001 fab5 	bl	8001d24 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <button_reading+0x1b0>)
 80007c0:	705a      	strb	r2, [r3, #1]
		if(debounceButtonBuffer1[1] == debounceButtonBuffer2[1])
 80007c2:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <button_reading+0x1b0>)
 80007c4:	785a      	ldrb	r2, [r3, #1]
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <button_reading+0x1ac>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d103      	bne.n	80007d6 <button_reading+0xe6>
			buttonBuffer[1] = debounceButtonBuffer1[1];
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <button_reading+0x1b0>)
 80007d0:	785a      	ldrb	r2, [r3, #1]
 80007d2:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <button_reading+0x1b8>)
 80007d4:	705a      	strb	r2, [r3, #1]
			if(buttonBuffer[1] == BUTTON_IS_PRESSED){
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <button_reading+0x1b8>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10e      	bne.n	80007fc <button_reading+0x10c>
				if(counterForButtonPress1s[1] < DURATION_FOR_AUTO_INCREASING){
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <button_reading+0x1bc>)
 80007e0:	885b      	ldrh	r3, [r3, #2]
 80007e2:	2b63      	cmp	r3, #99	; 0x63
 80007e4:	d806      	bhi.n	80007f4 <button_reading+0x104>
					counterForButtonPress1s[1]++;
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <button_reading+0x1bc>)
 80007e8:	885b      	ldrh	r3, [r3, #2]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <button_reading+0x1bc>)
 80007f0:	805a      	strh	r2, [r3, #2]
		break;
 80007f2:	e048      	b.n	8000886 <button_reading+0x196>
					flagForButtonPress1s[1] = 1;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <button_reading+0x1c0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	705a      	strb	r2, [r3, #1]
		break;
 80007fa:	e044      	b.n	8000886 <button_reading+0x196>
				counterForButtonPress1s[1] = 0;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <button_reading+0x1bc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	805a      	strh	r2, [r3, #2]
				flagForButtonPress1s[1] = 0;
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <button_reading+0x1c0>)
 8000804:	2200      	movs	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
		break;
 8000808:	e03d      	b.n	8000886 <button_reading+0x196>
		debounceButtonBuffer5[2] =debounceButtonBuffer4[2];
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <button_reading+0x1a0>)
 800080c:	789a      	ldrb	r2, [r3, #2]
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <button_reading+0x1a4>)
 8000810:	709a      	strb	r2, [r3, #2]
		debounceButtonBuffer4[2] =debounceButtonBuffer3[2];
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <button_reading+0x1a8>)
 8000814:	789a      	ldrb	r2, [r3, #2]
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <button_reading+0x1a0>)
 8000818:	709a      	strb	r2, [r3, #2]
		debounceButtonBuffer3[2] =debounceButtonBuffer2[2];
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <button_reading+0x1ac>)
 800081c:	789a      	ldrb	r2, [r3, #2]
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <button_reading+0x1a8>)
 8000820:	709a      	strb	r2, [r3, #2]
		debounceButtonBuffer2[2] =debounceButtonBuffer1[2];
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <button_reading+0x1b0>)
 8000824:	789a      	ldrb	r2, [r3, #2]
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <button_reading+0x1ac>)
 8000828:	709a      	strb	r2, [r3, #2]
		debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 800082a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082e:	481d      	ldr	r0, [pc, #116]	; (80008a4 <button_reading+0x1b4>)
 8000830:	f001 fa78 	bl	8001d24 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <button_reading+0x1b0>)
 800083a:	709a      	strb	r2, [r3, #2]
		if(debounceButtonBuffer1[2] == debounceButtonBuffer2[2])
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <button_reading+0x1b0>)
 800083e:	789a      	ldrb	r2, [r3, #2]
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <button_reading+0x1ac>)
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	429a      	cmp	r2, r3
 8000846:	d103      	bne.n	8000850 <button_reading+0x160>
			buttonBuffer[2] = debounceButtonBuffer1[2];
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <button_reading+0x1b0>)
 800084a:	789a      	ldrb	r2, [r3, #2]
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <button_reading+0x1b8>)
 800084e:	709a      	strb	r2, [r3, #2]
			if(buttonBuffer[2] == BUTTON_IS_PRESSED){
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <button_reading+0x1b8>)
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d10e      	bne.n	8000876 <button_reading+0x186>
				if(counterForButtonPress1s[2] < DURATION_FOR_AUTO_INCREASING){
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <button_reading+0x1bc>)
 800085a:	889b      	ldrh	r3, [r3, #4]
 800085c:	2b63      	cmp	r3, #99	; 0x63
 800085e:	d806      	bhi.n	800086e <button_reading+0x17e>
					counterForButtonPress1s[2]++;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <button_reading+0x1bc>)
 8000862:	889b      	ldrh	r3, [r3, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <button_reading+0x1bc>)
 800086a:	809a      	strh	r2, [r3, #4]
		break;
 800086c:	e00b      	b.n	8000886 <button_reading+0x196>
					flagForButtonPress1s[2] = 1;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <button_reading+0x1c0>)
 8000870:	2201      	movs	r2, #1
 8000872:	709a      	strb	r2, [r3, #2]
		break;
 8000874:	e007      	b.n	8000886 <button_reading+0x196>
				counterForButtonPress1s[2] = 0;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <button_reading+0x1bc>)
 8000878:	2200      	movs	r2, #0
 800087a:	809a      	strh	r2, [r3, #4]
				flagForButtonPress1s[2] = 0;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <button_reading+0x1c0>)
 800087e:	2200      	movs	r2, #0
 8000880:	709a      	strb	r2, [r3, #2]
		break;
 8000882:	e000      	b.n	8000886 <button_reading+0x196>
		break;
 8000884:	bf00      	nop
	}

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000070 	.word	0x20000070
 8000894:	20000074 	.word	0x20000074
 8000898:	2000006c 	.word	0x2000006c
 800089c:	20000068 	.word	0x20000068
 80008a0:	20000064 	.word	0x20000064
 80008a4:	40010800 	.word	0x40010800
 80008a8:	20000060 	.word	0x20000060
 80008ac:	2000007c 	.word	0x2000007c
 80008b0:	20000078 	.word	0x20000078

080008b4 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d901      	bls.n	80008c8 <is_button_pressed+0x14>
 80008c4:	2300      	movs	r3, #0
 80008c6:	e007      	b.n	80008d8 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <is_button_pressed+0x30>)
 80008cc:	5cd3      	ldrb	r3, [r2, r3]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf0c      	ite	eq
 80008d2:	2301      	moveq	r3, #1
 80008d4:	2300      	movne	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000060 	.word	0x20000060

080008e8 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d901      	bls.n	80008fc <is_button_pressed_1s+0x14>
 80008f8:	23ff      	movs	r3, #255	; 0xff
 80008fa:	e007      	b.n	800090c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <is_button_pressed_1s+0x30>)
 8000900:	5cd3      	ldrb	r3, [r2, r3]
 8000902:	2b01      	cmp	r3, #1
 8000904:	bf0c      	ite	eq
 8000906:	2301      	moveq	r3, #1
 8000908:	2300      	movne	r3, #0
 800090a:	b2db      	uxtb	r3, r3
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000078 	.word	0x20000078

0800091c <OnP_A>:
#include "main.h"
#include "input_processing.h"
#include "software_timer.h"

/////////////////////////////////////////////////
  void OnP_A(int num){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3301      	adds	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
	  switch(num){
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d003      	beq.n	8000938 <OnP_A+0x1c>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d006      	beq.n	8000944 <OnP_A+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_A2_GPIO_Port, P_A2_Pin, GPIO_PIN_RESET);
		  break;
	  default:
		  break;
 8000936:	e00b      	b.n	8000950 <OnP_A+0x34>
		  HAL_GPIO_WritePin (P_A1_GPIO_Port, P_A1_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2101      	movs	r1, #1
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <OnP_A+0x3c>)
 800093e:	f001 fa08 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000942:	e005      	b.n	8000950 <OnP_A+0x34>
		  HAL_GPIO_WritePin (P_A2_GPIO_Port, P_A2_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <OnP_A+0x3c>)
 800094a:	f001 fa02 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 800094e:	bf00      	nop
	  }
  }
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40010c00 	.word	0x40010c00

0800095c <OnP_B>:
  void OnP_B(int num){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3301      	adds	r3, #1
 8000968:	607b      	str	r3, [r7, #4]
	  switch(num){
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d003      	beq.n	8000978 <OnP_B+0x1c>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d006      	beq.n	8000984 <OnP_B+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_B2_GPIO_Port, P_B2_Pin, GPIO_PIN_RESET);
		  break;
	  default:
		  break;
 8000976:	e00c      	b.n	8000992 <OnP_B+0x36>
		  HAL_GPIO_WritePin (P_B1_GPIO_Port, P_B1_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2102      	movs	r1, #2
 800097c:	4807      	ldr	r0, [pc, #28]	; (800099c <OnP_B+0x40>)
 800097e:	f001 f9e8 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000982:	e006      	b.n	8000992 <OnP_B+0x36>
		  HAL_GPIO_WritePin (P_B2_GPIO_Port, P_B2_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <OnP_B+0x40>)
 800098c:	f001 f9e1 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000990:	bf00      	nop
	  }
  }
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40010c00 	.word	0x40010c00

080009a0 <OnP_C>:
  void OnP_C(int num){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	  num+=1;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3301      	adds	r3, #1
 80009ac:	607b      	str	r3, [r7, #4]
	  switch(num){
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d003      	beq.n	80009bc <OnP_C+0x1c>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d006      	beq.n	80009c8 <OnP_C+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_C2_GPIO_Port, P_C2_Pin, GPIO_PIN_RESET);
		  break;
	  default:
		  break;
 80009ba:	e00c      	b.n	80009d6 <OnP_C+0x36>
		  HAL_GPIO_WritePin (P_C1_GPIO_Port, P_C1_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2104      	movs	r1, #4
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <OnP_C+0x40>)
 80009c2:	f001 f9c6 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 80009c6:	e006      	b.n	80009d6 <OnP_C+0x36>
		  HAL_GPIO_WritePin (P_C2_GPIO_Port, P_C2_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <OnP_C+0x40>)
 80009d0:	f001 f9bf 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 80009d4:	bf00      	nop
	  }
  }
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <OnP_D>:
  void OnP_D(int num){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	  num+=1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3301      	adds	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
	  switch(num){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d003      	beq.n	8000a00 <OnP_D+0x1c>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d006      	beq.n	8000a0c <OnP_D+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_D2_GPIO_Port, P_D2_Pin, GPIO_PIN_RESET);
		  break;
	  default:
		  break;
 80009fe:	e00c      	b.n	8000a1a <OnP_D+0x36>
		  HAL_GPIO_WritePin (P_D1_GPIO_Port, P_D1_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2108      	movs	r1, #8
 8000a04:	4807      	ldr	r0, [pc, #28]	; (8000a24 <OnP_D+0x40>)
 8000a06:	f001 f9a4 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000a0a:	e006      	b.n	8000a1a <OnP_D+0x36>
		  HAL_GPIO_WritePin (P_D2_GPIO_Port, P_D2_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <OnP_D+0x40>)
 8000a14:	f001 f99d 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000a18:	bf00      	nop
	  }
  }
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40010c00 	.word	0x40010c00

08000a28 <OnP_E>:
  void OnP_E(int num){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d003      	beq.n	8000a44 <OnP_E+0x1c>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d006      	beq.n	8000a50 <OnP_E+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_E2_GPIO_Port, P_E2_Pin, GPIO_PIN_RESET);
		  break;
	  default:
		  break;
 8000a42:	e00c      	b.n	8000a5e <OnP_E+0x36>
		  HAL_GPIO_WritePin (P_E1_GPIO_Port, P_E1_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2110      	movs	r1, #16
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <OnP_E+0x40>)
 8000a4a:	f001 f982 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000a4e:	e006      	b.n	8000a5e <OnP_E+0x36>
		  HAL_GPIO_WritePin (P_E2_GPIO_Port, P_E2_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <OnP_E+0x40>)
 8000a58:	f001 f97b 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000a5c:	bf00      	nop
	  }
  }
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <OnP_F>:
  void OnP_F(int num){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d003      	beq.n	8000a88 <OnP_F+0x1c>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d006      	beq.n	8000a94 <OnP_F+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_F2_GPIO_Port, P_F2_Pin, GPIO_PIN_RESET);
		  break;
	  default:
		  break;
 8000a86:	e00c      	b.n	8000aa2 <OnP_F+0x36>
		  HAL_GPIO_WritePin (P_F1_GPIO_Port, P_F1_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <OnP_F+0x40>)
 8000a8e:	f001 f960 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000a92:	e006      	b.n	8000aa2 <OnP_F+0x36>
		  HAL_GPIO_WritePin (P_F2_GPIO_Port, P_F2_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <OnP_F+0x40>)
 8000a9c:	f001 f959 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000aa0:	bf00      	nop
	  }
  }
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <OnP_G>:
  void OnP_G(int num){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3301      	adds	r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d003      	beq.n	8000acc <OnP_G+0x1c>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d006      	beq.n	8000ad8 <OnP_G+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_G2_GPIO_Port, P_G2_Pin, GPIO_PIN_RESET);
		  break;
	  default:
		  break;
 8000aca:	e00c      	b.n	8000ae6 <OnP_G+0x36>
		  HAL_GPIO_WritePin (P_G1_GPIO_Port, P_G1_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <OnP_G+0x40>)
 8000ad2:	f001 f93e 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000ad6:	e006      	b.n	8000ae6 <OnP_G+0x36>
		  HAL_GPIO_WritePin (P_G2_GPIO_Port, P_G2_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <OnP_G+0x40>)
 8000ae0:	f001 f937 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000ae4:	bf00      	nop
	  }
  }
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40010c00 	.word	0x40010c00

08000af4 <OffP_A>:
/////////////////////////////////////////////////
  void OffP_A(int num){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3301      	adds	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d003      	beq.n	8000b10 <OffP_A+0x1c>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d006      	beq.n	8000b1c <OffP_A+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_A2_GPIO_Port, P_A2_Pin, GPIO_PIN_SET);
		  break;
	  default:
		  break;
 8000b0e:	e00b      	b.n	8000b28 <OffP_A+0x34>
		  HAL_GPIO_WritePin (P_A1_GPIO_Port, P_A1_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2101      	movs	r1, #1
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <OffP_A+0x3c>)
 8000b16:	f001 f91c 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000b1a:	e005      	b.n	8000b28 <OffP_A+0x34>
		  HAL_GPIO_WritePin (P_A2_GPIO_Port, P_A2_Pin, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <OffP_A+0x3c>)
 8000b22:	f001 f916 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000b26:	bf00      	nop
	  }
  }
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <OffP_B>:
  void OffP_B(int num){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d003      	beq.n	8000b50 <OffP_B+0x1c>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d006      	beq.n	8000b5c <OffP_B+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_B2_GPIO_Port, P_B2_Pin, GPIO_PIN_SET);
		  break;
	  default:
		  break;
 8000b4e:	e00c      	b.n	8000b6a <OffP_B+0x36>
		  HAL_GPIO_WritePin (P_B1_GPIO_Port, P_B1_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2102      	movs	r1, #2
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <OffP_B+0x40>)
 8000b56:	f001 f8fc 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000b5a:	e006      	b.n	8000b6a <OffP_B+0x36>
		  HAL_GPIO_WritePin (P_B2_GPIO_Port, P_B2_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <OffP_B+0x40>)
 8000b64:	f001 f8f5 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000b68:	bf00      	nop
	  }
  }
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <OffP_C>:
  void OffP_C(int num){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3301      	adds	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d003      	beq.n	8000b94 <OffP_C+0x1c>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d006      	beq.n	8000ba0 <OffP_C+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_C2_GPIO_Port, P_C2_Pin, GPIO_PIN_SET);
		  break;
	  default:
		  break;
 8000b92:	e00c      	b.n	8000bae <OffP_C+0x36>
		  HAL_GPIO_WritePin (P_C1_GPIO_Port, P_C1_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2104      	movs	r1, #4
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <OffP_C+0x40>)
 8000b9a:	f001 f8da 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000b9e:	e006      	b.n	8000bae <OffP_C+0x36>
		  HAL_GPIO_WritePin (P_C2_GPIO_Port, P_C2_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <OffP_C+0x40>)
 8000ba8:	f001 f8d3 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000bac:	bf00      	nop
	  }
  }
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <OffP_D>:
  void OffP_D(int num){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d003      	beq.n	8000bd8 <OffP_D+0x1c>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d006      	beq.n	8000be4 <OffP_D+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_D2_GPIO_Port, P_D2_Pin, GPIO_PIN_SET);
		  break;
	  default:
		  break;
 8000bd6:	e00c      	b.n	8000bf2 <OffP_D+0x36>
		  HAL_GPIO_WritePin (P_D1_GPIO_Port, P_D1_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2108      	movs	r1, #8
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <OffP_D+0x40>)
 8000bde:	f001 f8b8 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000be2:	e006      	b.n	8000bf2 <OffP_D+0x36>
		  HAL_GPIO_WritePin (P_D2_GPIO_Port, P_D2_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <OffP_D+0x40>)
 8000bec:	f001 f8b1 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000bf0:	bf00      	nop
	  }
  }
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <OffP_E>:
  void OffP_E(int num){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d003      	beq.n	8000c1c <OffP_E+0x1c>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d006      	beq.n	8000c28 <OffP_E+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_E2_GPIO_Port, P_E2_Pin, GPIO_PIN_SET);
		  break;
	  default:
		  break;
 8000c1a:	e00c      	b.n	8000c36 <OffP_E+0x36>
		  HAL_GPIO_WritePin (P_E1_GPIO_Port, P_E1_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2110      	movs	r1, #16
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <OffP_E+0x40>)
 8000c22:	f001 f896 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000c26:	e006      	b.n	8000c36 <OffP_E+0x36>
		  HAL_GPIO_WritePin (P_E2_GPIO_Port, P_E2_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <OffP_E+0x40>)
 8000c30:	f001 f88f 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000c34:	bf00      	nop
	  }
  }
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <OffP_F>:
  void OffP_F(int num){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d003      	beq.n	8000c60 <OffP_F+0x1c>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d006      	beq.n	8000c6c <OffP_F+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_F2_GPIO_Port, P_F2_Pin, GPIO_PIN_SET);
		  break;
	  default:
		  break;
 8000c5e:	e00c      	b.n	8000c7a <OffP_F+0x36>
		  HAL_GPIO_WritePin (P_F1_GPIO_Port, P_F1_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2120      	movs	r1, #32
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <OffP_F+0x40>)
 8000c66:	f001 f874 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000c6a:	e006      	b.n	8000c7a <OffP_F+0x36>
		  HAL_GPIO_WritePin (P_F2_GPIO_Port, P_F2_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c72:	4804      	ldr	r0, [pc, #16]	; (8000c84 <OffP_F+0x40>)
 8000c74:	f001 f86d 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000c78:	bf00      	nop
	  }
  }
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010c00 	.word	0x40010c00

08000c88 <OffP_G>:
  void OffP_G(int num){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	  num+=1;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
	  switch(num){
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d003      	beq.n	8000ca4 <OffP_G+0x1c>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d006      	beq.n	8000cb0 <OffP_G+0x28>
		  break;
	  case 2:
		  HAL_GPIO_WritePin (P_G2_GPIO_Port, P_G2_Pin, GPIO_PIN_SET);
		  break;
	  default:
		  break;
 8000ca2:	e00c      	b.n	8000cbe <OffP_G+0x36>
		  HAL_GPIO_WritePin (P_G1_GPIO_Port, P_G1_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <OffP_G+0x40>)
 8000caa:	f001 f852 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000cae:	e006      	b.n	8000cbe <OffP_G+0x36>
		  HAL_GPIO_WritePin (P_G2_GPIO_Port, P_G2_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <OffP_G+0x40>)
 8000cb8:	f001 f84b 	bl	8001d52 <HAL_GPIO_WritePin>
		  break;
 8000cbc:	bf00      	nop
	  }
  }
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010c00 	.word	0x40010c00

08000ccc <display7SEG>:
/////////////////////////////////////////////////
void display7SEG(int lednum,int num){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
	  if(lednum!=0&&lednum!=1){return;}
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <display7SEG+0x18>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	f040 810e 	bne.w	8000f00 <display7SEG+0x234>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2b09      	cmp	r3, #9
 8000ce8:	f200 80f4 	bhi.w	8000ed4 <display7SEG+0x208>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <display7SEG+0x28>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d1d 	.word	0x08000d1d
 8000cf8:	08000d49 	.word	0x08000d49
 8000cfc:	08000d75 	.word	0x08000d75
 8000d00:	08000da1 	.word	0x08000da1
 8000d04:	08000dcd 	.word	0x08000dcd
 8000d08:	08000df9 	.word	0x08000df9
 8000d0c:	08000e25 	.word	0x08000e25
 8000d10:	08000e51 	.word	0x08000e51
 8000d14:	08000e7d 	.word	0x08000e7d
 8000d18:	08000ea9 	.word	0x08000ea9
	  switch (num) {
	      case 0:
	    	  OnP_A(lednum);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fdfd 	bl	800091c <OnP_A>
	    	  OnP_B(lednum);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fe1a 	bl	800095c <OnP_B>
	    	  OnP_C(lednum);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fe39 	bl	80009a0 <OnP_C>
	    	  OnP_D(lednum);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fe58 	bl	80009e4 <OnP_D>
	    	  OnP_E(lednum);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fe77 	bl	8000a28 <OnP_E>
	    	  OnP_F(lednum);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fe96 	bl	8000a6c <OnP_F>
	    	  OffP_G(lednum);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ffa1 	bl	8000c88 <OffP_G>
	          break;
 8000d46:	e0dc      	b.n	8000f02 <display7SEG+0x236>
	      case 1:
	    	  OffP_A(lednum);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fed3 	bl	8000af4 <OffP_A>
	    	  OnP_B(lednum);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fe04 	bl	800095c <OnP_B>
	    	  OnP_C(lednum);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fe23 	bl	80009a0 <OnP_C>
	    	  OffP_D(lednum);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ff2e 	bl	8000bbc <OffP_D>
	    	  OffP_E(lednum);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff4d 	bl	8000c00 <OffP_E>
	    	  OffP_F(lednum);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff6c 	bl	8000c44 <OffP_F>
	    	  OffP_G(lednum);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff8b 	bl	8000c88 <OffP_G>
	          break;
 8000d72:	e0c6      	b.n	8000f02 <display7SEG+0x236>
	      case 2:
	    	  OnP_A(lednum);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd1 	bl	800091c <OnP_A>
	    	  OnP_B(lednum);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fdee 	bl	800095c <OnP_B>
	    	  OffP_C(lednum);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fef9 	bl	8000b78 <OffP_C>
	    	  OnP_D(lednum);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fe2c 	bl	80009e4 <OnP_D>
	    	  OnP_E(lednum);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fe4b 	bl	8000a28 <OnP_E>
	    	  OffP_F(lednum);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff56 	bl	8000c44 <OffP_F>
	    	  OnP_G(lednum);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fe89 	bl	8000ab0 <OnP_G>
	          break;
 8000d9e:	e0b0      	b.n	8000f02 <display7SEG+0x236>
	      case 3:
	    	  OnP_A(lednum);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fdbb 	bl	800091c <OnP_A>
	    	  OnP_B(lednum);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fdd8 	bl	800095c <OnP_B>
	    	  OnP_C(lednum);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fdf7 	bl	80009a0 <OnP_C>
	    	  OnP_D(lednum);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fe16 	bl	80009e4 <OnP_D>
	    	  OffP_E(lednum);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff21 	bl	8000c00 <OffP_E>
	    	  OffP_F(lednum);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff40 	bl	8000c44 <OffP_F>
	    	  OnP_G(lednum);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fe73 	bl	8000ab0 <OnP_G>
	          break;
 8000dca:	e09a      	b.n	8000f02 <display7SEG+0x236>
	      case 4:
	    	  OffP_A(lednum);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fe91 	bl	8000af4 <OffP_A>
	    	  OnP_B(lednum);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fdc2 	bl	800095c <OnP_B>
	    	  OnP_C(lednum);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fde1 	bl	80009a0 <OnP_C>
	    	  OffP_D(lednum);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff feec 	bl	8000bbc <OffP_D>
	    	  OffP_E(lednum);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff0b 	bl	8000c00 <OffP_E>
	    	  OnP_F(lednum);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fe3e 	bl	8000a6c <OnP_F>
	    	  OnP_G(lednum);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fe5d 	bl	8000ab0 <OnP_G>
	          break;
 8000df6:	e084      	b.n	8000f02 <display7SEG+0x236>
	      case 5:
	    	  OnP_A(lednum);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fd8f 	bl	800091c <OnP_A>
	    	  OffP_B(lednum);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fe98 	bl	8000b34 <OffP_B>
	    	  OnP_C(lednum);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fdcb 	bl	80009a0 <OnP_C>
	    	  OnP_D(lednum);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fdea 	bl	80009e4 <OnP_D>
	    	  OffP_E(lednum);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fef5 	bl	8000c00 <OffP_E>
	    	  OnP_F(lednum);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fe28 	bl	8000a6c <OnP_F>
	    	  OnP_G(lednum);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fe47 	bl	8000ab0 <OnP_G>
	          break;
 8000e22:	e06e      	b.n	8000f02 <display7SEG+0x236>
	      case 6:
	    	  OnP_A(lednum);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fd79 	bl	800091c <OnP_A>
	    	  OffP_B(lednum);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fe82 	bl	8000b34 <OffP_B>
	    	  OnP_C(lednum);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fdb5 	bl	80009a0 <OnP_C>
	    	  OnP_D(lednum);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fdd4 	bl	80009e4 <OnP_D>
	    	  OnP_E(lednum);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff fdf3 	bl	8000a28 <OnP_E>
	    	  OnP_F(lednum);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fe12 	bl	8000a6c <OnP_F>
	    	  OnP_G(lednum);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fe31 	bl	8000ab0 <OnP_G>
	          break;
 8000e4e:	e058      	b.n	8000f02 <display7SEG+0x236>
	      case 7:
	    	  OnP_A(lednum);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fd63 	bl	800091c <OnP_A>
	    	  OnP_B(lednum);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fd80 	bl	800095c <OnP_B>
	    	  OnP_C(lednum);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff fd9f 	bl	80009a0 <OnP_C>
	    	  OffP_D(lednum);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff feaa 	bl	8000bbc <OffP_D>
	    	  OffP_E(lednum);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fec9 	bl	8000c00 <OffP_E>
	    	  OffP_F(lednum);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fee8 	bl	8000c44 <OffP_F>
	    	  OffP_G(lednum);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff07 	bl	8000c88 <OffP_G>
	          break;
 8000e7a:	e042      	b.n	8000f02 <display7SEG+0x236>
	      case 8:
	    	  OnP_A(lednum);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fd4d 	bl	800091c <OnP_A>
	    	  OnP_B(lednum);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fd6a 	bl	800095c <OnP_B>
	    	  OnP_C(lednum);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fd89 	bl	80009a0 <OnP_C>
	    	  OnP_D(lednum);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fda8 	bl	80009e4 <OnP_D>
	    	  OnP_E(lednum);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fdc7 	bl	8000a28 <OnP_E>
	    	  OnP_F(lednum);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fde6 	bl	8000a6c <OnP_F>
	    	  OnP_G(lednum);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fe05 	bl	8000ab0 <OnP_G>
	          break;
 8000ea6:	e02c      	b.n	8000f02 <display7SEG+0x236>
	      case 9:
	    	  OnP_A(lednum);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fd37 	bl	800091c <OnP_A>
	    	  OnP_B(lednum);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fd54 	bl	800095c <OnP_B>
	    	  OnP_C(lednum);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff fd73 	bl	80009a0 <OnP_C>
	    	  OnP_D(lednum);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fd92 	bl	80009e4 <OnP_D>
	    	  OffP_E(lednum);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fe9d 	bl	8000c00 <OffP_E>
	    	  OnP_F(lednum);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fdd0 	bl	8000a6c <OnP_F>
	    	  OnP_G(lednum);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fdef 	bl	8000ab0 <OnP_G>
	          break;
 8000ed2:	e016      	b.n	8000f02 <display7SEG+0x236>
	      default:
	    	  OnP_A(lednum);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fd21 	bl	800091c <OnP_A>
	    	  OnP_B(lednum);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fd3e 	bl	800095c <OnP_B>
	    	  OnP_C(lednum);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff fd5d 	bl	80009a0 <OnP_C>
	    	  OnP_D(lednum);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fd7c 	bl	80009e4 <OnP_D>
	    	  OnP_E(lednum);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fd9b 	bl	8000a28 <OnP_E>
	    	  OnP_F(lednum);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fdba 	bl	8000a6c <OnP_F>
	    	  OffP_G(lednum);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fec5 	bl	8000c88 <OffP_G>
	    	  break;
 8000efe:	e000      	b.n	8000f02 <display7SEG+0x236>
	  if(lednum!=0&&lednum!=1){return;}
 8000f00:	bf00      	nop
	  }

  }
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <OnEN_7SEG0>:
/////////////////////////////////////////////////
void OnEN_7SEG0(int i){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	  switch(i){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <OnEN_7SEG0+0x16>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d006      	beq.n	8000f2a <OnEN_7SEG0+0x22>
	  		  break;
	  	  case 1:
	  		  HAL_GPIO_WritePin (EN1_7SEG0_GPIO_Port, EN1_7SEG0_Pin, GPIO_PIN_RESET);
	  		  break;
	  	  default:
	  		  break;
 8000f1c:	e00c      	b.n	8000f38 <OnEN_7SEG0+0x30>
	  		  HAL_GPIO_WritePin (EN0_7SEG0_GPIO_Port, EN0_7SEG0_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <OnEN_7SEG0+0x38>)
 8000f24:	f000 ff15 	bl	8001d52 <HAL_GPIO_WritePin>
	  		  break;
 8000f28:	e006      	b.n	8000f38 <OnEN_7SEG0+0x30>
	  		  HAL_GPIO_WritePin (EN1_7SEG0_GPIO_Port, EN1_7SEG0_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <OnEN_7SEG0+0x38>)
 8000f32:	f000 ff0e 	bl	8001d52 <HAL_GPIO_WritePin>
	  		  break;
 8000f36:	bf00      	nop
	  }
  }
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010800 	.word	0x40010800

08000f44 <OffEN_7SEG0>:
void OffEN_7SEG0(int i){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	  switch(i){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <OffEN_7SEG0+0x16>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d006      	beq.n	8000f66 <OffEN_7SEG0+0x22>
	  		  break;
	  	  case 1:
	  		  HAL_GPIO_WritePin (EN1_7SEG0_GPIO_Port, EN1_7SEG0_Pin, GPIO_PIN_SET);
	  		  break;
	  	  default:
	  		  break;
 8000f58:	e00c      	b.n	8000f74 <OffEN_7SEG0+0x30>
	  		  HAL_GPIO_WritePin (EN0_7SEG0_GPIO_Port, EN0_7SEG0_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <OffEN_7SEG0+0x38>)
 8000f60:	f000 fef7 	bl	8001d52 <HAL_GPIO_WritePin>
	  		  break;
 8000f64:	e006      	b.n	8000f74 <OffEN_7SEG0+0x30>
	  		  HAL_GPIO_WritePin (EN1_7SEG0_GPIO_Port, EN1_7SEG0_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <OffEN_7SEG0+0x38>)
 8000f6e:	f000 fef0 	bl	8001d52 <HAL_GPIO_WritePin>
	  		  break;
 8000f72:	bf00      	nop
	  }
  }
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40010800 	.word	0x40010800

08000f80 <OnEN_7SEG1>:

void OnEN_7SEG1(int i){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	  switch(i){
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <OnEN_7SEG1+0x16>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d007      	beq.n	8000fa4 <OnEN_7SEG1+0x24>
	  		  break;
	  	  case 1:
	  		  HAL_GPIO_WritePin (EN1_7SEG1_GPIO_Port, EN1_7SEG1_Pin, GPIO_PIN_RESET);
	  		  break;
	  	  default:
	  		  break;
 8000f94:	e00d      	b.n	8000fb2 <OnEN_7SEG1+0x32>
	  		  HAL_GPIO_WritePin (EN0_7SEG1_GPIO_Port, EN0_7SEG1_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <OnEN_7SEG1+0x3c>)
 8000f9e:	f000 fed8 	bl	8001d52 <HAL_GPIO_WritePin>
	  		  break;
 8000fa2:	e006      	b.n	8000fb2 <OnEN_7SEG1+0x32>
	  		  HAL_GPIO_WritePin (EN1_7SEG1_GPIO_Port, EN1_7SEG1_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000faa:	4804      	ldr	r0, [pc, #16]	; (8000fbc <OnEN_7SEG1+0x3c>)
 8000fac:	f000 fed1 	bl	8001d52 <HAL_GPIO_WritePin>
	  		  break;
 8000fb0:	bf00      	nop
	  }
  }
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <OffEN_7SEG1>:
void OffEN_7SEG1(int i){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	  switch(i){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <OffEN_7SEG1+0x16>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d007      	beq.n	8000fe4 <OffEN_7SEG1+0x24>
	  		  break;
	  	  case 1:
	  		  HAL_GPIO_WritePin (EN1_7SEG1_GPIO_Port, EN1_7SEG1_Pin, GPIO_PIN_SET);
	  		  break;
	  	  default:
	  		  break;
 8000fd4:	e00d      	b.n	8000ff2 <OffEN_7SEG1+0x32>
	  		  HAL_GPIO_WritePin (EN0_7SEG1_GPIO_Port, EN0_7SEG1_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <OffEN_7SEG1+0x3c>)
 8000fde:	f000 feb8 	bl	8001d52 <HAL_GPIO_WritePin>
	  		  break;
 8000fe2:	e006      	b.n	8000ff2 <OffEN_7SEG1+0x32>
	  		  HAL_GPIO_WritePin (EN1_7SEG1_GPIO_Port, EN1_7SEG1_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fea:	4804      	ldr	r0, [pc, #16]	; (8000ffc <OffEN_7SEG1+0x3c>)
 8000fec:	f000 feb1 	bl	8001d52 <HAL_GPIO_WritePin>
	  		  break;
 8000ff0:	bf00      	nop
	  }
  }
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40010800 	.word	0x40010800

08001000 <TurnOffAll7SEG0>:
/////////////////////////////////////////////////
void TurnOffAll7SEG0(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	  OffEN_7SEG0(0);
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ff9d 	bl	8000f44 <OffEN_7SEG0>
	  OffEN_7SEG0(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ff9a 	bl	8000f44 <OffEN_7SEG0>
  }
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <TurnOffAll7SEG1>:
void TurnOffAll7SEG1(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	  OffEN_7SEG1(0);
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff ffd1 	bl	8000fc0 <OffEN_7SEG1>
	  OffEN_7SEG1(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff ffce 	bl	8000fc0 <OffEN_7SEG1>
  }
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <update7SEG0>:
/////////////////////////////////////////////////
void update7SEG0(int index){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	    switch (index){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <update7SEG0+0x16>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d009      	beq.n	8001050 <update7SEG0+0x28>
	            //Display the second 7SEG with sevenLEDdisplayBuffer[0]
	        	TurnOffAll7SEG0();
	        	display7SEG(0,sevenLEDdisplayBuffer[0]);
	            break;
	        default:
	            break;
 800103c:	e011      	b.n	8001062 <update7SEG0+0x3a>
	        	TurnOffAll7SEG0();
 800103e:	f7ff ffdf 	bl	8001000 <TurnOffAll7SEG0>
	        	display7SEG(0,sevenLEDdisplayBuffer[1]);
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <update7SEG0+0x48>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4619      	mov	r1, r3
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fe3f 	bl	8000ccc <display7SEG>
	            break;
 800104e:	e008      	b.n	8001062 <update7SEG0+0x3a>
	        	TurnOffAll7SEG0();
 8001050:	f7ff ffd6 	bl	8001000 <TurnOffAll7SEG0>
	        	display7SEG(0,sevenLEDdisplayBuffer[0]);
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <update7SEG0+0x48>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fe36 	bl	8000ccc <display7SEG>
	            break;
 8001060:	bf00      	nop
	    }
    	OnEN_7SEG0(index);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff50 	bl	8000f08 <OnEN_7SEG0>
	}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000

08001074 <update7SEG1>:
void update7SEG1(int index){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	    switch (index){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <update7SEG1+0x16>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d009      	beq.n	800109c <update7SEG1+0x28>
	            //Display the second 7SEG with sevenLEDdisplayBuffer[0]
	        	TurnOffAll7SEG1();
	        	display7SEG(1,sevenLEDdisplayBuffer[2]);
	            break;
	        default:
	            break;
 8001088:	e011      	b.n	80010ae <update7SEG1+0x3a>
	        	TurnOffAll7SEG1();
 800108a:	f7ff ffc3 	bl	8001014 <TurnOffAll7SEG1>
	        	display7SEG(1,sevenLEDdisplayBuffer[3]);
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <update7SEG1+0x48>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	4619      	mov	r1, r3
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fe19 	bl	8000ccc <display7SEG>
	            break;
 800109a:	e008      	b.n	80010ae <update7SEG1+0x3a>
	        	TurnOffAll7SEG1();
 800109c:	f7ff ffba 	bl	8001014 <TurnOffAll7SEG1>
	        	display7SEG(1,sevenLEDdisplayBuffer[2]);
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <update7SEG1+0x48>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff fe10 	bl	8000ccc <display7SEG>
	            break;
 80010ac:	bf00      	nop
	    }
    	OnEN_7SEG1(index);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff66 	bl	8000f80 <OnEN_7SEG1>
	}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000000 	.word	0x20000000

080010c0 <OnRed1>:

/////////////////////////////////////////////////////////////////////////////////////
void OnRed1(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <OnRed1+0x14>)
 80010ca:	f000 fe42 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40010800 	.word	0x40010800

080010d8 <OnYellow1>:
void OnYellow1(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2104      	movs	r1, #4
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <OnYellow1+0x14>)
 80010e2:	f000 fe36 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40010800 	.word	0x40010800

080010f0 <OnGreen1>:
void OnGreen1(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2108      	movs	r1, #8
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <OnGreen1+0x14>)
 80010fa:	f000 fe2a 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010800 	.word	0x40010800

08001108 <OffRed1>:
void OffRed1(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2102      	movs	r1, #2
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <OffRed1+0x14>)
 8001112:	f000 fe1e 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010800 	.word	0x40010800

08001120 <OffYellow1>:
void OffYellow1(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2104      	movs	r1, #4
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <OffYellow1+0x14>)
 800112a:	f000 fe12 	bl	8001d52 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40010800 	.word	0x40010800

08001138 <OffGreen1>:
void OffGreen1(){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2108      	movs	r1, #8
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <OffGreen1+0x14>)
 8001142:	f000 fe06 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010800 	.word	0x40010800

08001150 <OnRed2>:
/////////////////////////////////////////////////
void OnRed2(){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2110      	movs	r1, #16
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <OnRed2+0x14>)
 800115a:	f000 fdfa 	bl	8001d52 <HAL_GPIO_WritePin>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40010800 	.word	0x40010800

08001168 <OnYellow2>:
void OnYellow2(){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2120      	movs	r1, #32
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <OnYellow2+0x14>)
 8001172:	f000 fdee 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40010800 	.word	0x40010800

08001180 <OnGreen2>:
void OnGreen2(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <OnGreen2+0x14>)
 800118a:	f000 fde2 	bl	8001d52 <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40010800 	.word	0x40010800

08001198 <OffRed2>:
void OffRed2(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2110      	movs	r1, #16
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <OffRed2+0x14>)
 80011a2:	f000 fdd6 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40010800 	.word	0x40010800

080011b0 <OffYellow2>:
void OffYellow2(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <OffYellow2+0x14>)
 80011ba:	f000 fdca 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010800 	.word	0x40010800

080011c8 <OffGreen2>:
void OffGreen2(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <OffGreen2+0x14>)
 80011d2:	f000 fdbe 	bl	8001d52 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40010800 	.word	0x40010800

080011e0 <OffAllLED>:
/////////////////////////////////////////////////
void OffAllLED(){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	OffRed1();
 80011e4:	f7ff ff90 	bl	8001108 <OffRed1>
	OffYellow1();
 80011e8:	f7ff ff9a 	bl	8001120 <OffYellow1>
	OffGreen1();
 80011ec:	f7ff ffa4 	bl	8001138 <OffGreen1>
	OffRed2();
 80011f0:	f7ff ffd2 	bl	8001198 <OffRed2>
	OffYellow2();
 80011f4:	f7ff ffdc 	bl	80011b0 <OffYellow2>
	OffGreen2();
 80011f8:	f7ff ffe6 	bl	80011c8 <OffGreen2>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <OffAllLED1>:
void OffAllLED1(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	OffRed1();
 8001204:	f7ff ff80 	bl	8001108 <OffRed1>
	OffYellow1();
 8001208:	f7ff ff8a 	bl	8001120 <OffYellow1>
	OffGreen1();
 800120c:	f7ff ff94 	bl	8001138 <OffGreen1>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <OffAllLED2>:
void OffAllLED2(){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	OffRed2();
 8001218:	f7ff ffbe 	bl	8001198 <OffRed2>
	OffYellow2();
 800121c:	f7ff ffc8 	bl	80011b0 <OffYellow2>
	OffGreen2();
 8001220:	f7ff ffd2 	bl	80011c8 <OffGreen2>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <ToggleAllRed>:
void ToggleAllRed(){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800122c:	2102      	movs	r1, #2
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <ToggleAllRed+0x18>)
 8001230:	f000 fda7 	bl	8001d82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8001234:	2110      	movs	r1, #16
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <ToggleAllRed+0x18>)
 8001238:	f000 fda3 	bl	8001d82 <HAL_GPIO_TogglePin>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40010800 	.word	0x40010800

08001244 <ToggleAllYellow>:

void ToggleAllYellow(){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8001248:	2104      	movs	r1, #4
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <ToggleAllYellow+0x18>)
 800124c:	f000 fd99 	bl	8001d82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8001250:	2120      	movs	r1, #32
 8001252:	4802      	ldr	r0, [pc, #8]	; (800125c <ToggleAllYellow+0x18>)
 8001254:	f000 fd95 	bl	8001d82 <HAL_GPIO_TogglePin>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010800 	.word	0x40010800

08001260 <ToggleAllGreen>:

void ToggleAllGreen(){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8001264:	2108      	movs	r1, #8
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <ToggleAllGreen+0x18>)
 8001268:	f000 fd8b 	bl	8001d82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 800126c:	2140      	movs	r1, #64	; 0x40
 800126e:	4802      	ldr	r0, [pc, #8]	; (8001278 <ToggleAllGreen+0x18>)
 8001270:	f000 fd87 	bl	8001d82 <HAL_GPIO_TogglePin>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40010800 	.word	0x40010800

0800127c <TimerInterupt>:
}
/////////////////////////////////////////////////
int index_led=0;
const int sevenSegTimer=5;
const int LEDblinkingTimer=25;
void TimerInterupt(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	if(timer_flag[0]==1){
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <TimerInterupt+0x88>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d11a      	bne.n	80012be <TimerInterupt+0x42>
		setTimer(0,sevenSegTimer);
 8001288:	2305      	movs	r3, #5
 800128a:	4619      	mov	r1, r3
 800128c:	2000      	movs	r0, #0
 800128e:	f000 f963 	bl	8001558 <setTimer>
		index_led++;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <TimerInterupt+0x8c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <TimerInterupt+0x8c>)
 800129a:	6013      	str	r3, [r2, #0]
		if(index_led>1){
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <TimerInterupt+0x8c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	dd02      	ble.n	80012aa <TimerInterupt+0x2e>
			index_led=0;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <TimerInterupt+0x8c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
		}
		update7SEG0(index_led);
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <TimerInterupt+0x8c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff feba 	bl	8001028 <update7SEG0>
		update7SEG1(index_led);
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <TimerInterupt+0x8c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fedb 	bl	8001074 <update7SEG1>
	}
	if(timer_flag[2]==1){
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <TimerInterupt+0x88>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d118      	bne.n	80012f8 <TimerInterupt+0x7c>
		setTimer(2,LEDblinkingTimer);
 80012c6:	2319      	movs	r3, #25
 80012c8:	4619      	mov	r1, r3
 80012ca:	2002      	movs	r0, #2
 80012cc:	f000 f944 	bl	8001558 <setTimer>
		switch(currMode){
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <TimerInterupt+0x90>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d00c      	beq.n	80012f2 <TimerInterupt+0x76>
 80012d8:	2b03      	cmp	r3, #3
 80012da:	dc0f      	bgt.n	80012fc <TimerInterupt+0x80>
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d002      	beq.n	80012e6 <TimerInterupt+0x6a>
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d003      	beq.n	80012ec <TimerInterupt+0x70>
				break;
			case MODE4:
				ToggleAllGreen();
				break;
			default:
				break;
 80012e4:	e00a      	b.n	80012fc <TimerInterupt+0x80>
				ToggleAllRed();
 80012e6:	f7ff ff9f 	bl	8001228 <ToggleAllRed>
				break;
 80012ea:	e008      	b.n	80012fe <TimerInterupt+0x82>
				ToggleAllYellow();
 80012ec:	f7ff ffaa 	bl	8001244 <ToggleAllYellow>
				break;
 80012f0:	e005      	b.n	80012fe <TimerInterupt+0x82>
				ToggleAllGreen();
 80012f2:	f7ff ffb5 	bl	8001260 <ToggleAllGreen>
				break;
 80012f6:	e002      	b.n	80012fe <TimerInterupt+0x82>
		}
	}
 80012f8:	bf00      	nop
 80012fa:	e000      	b.n	80012fe <TimerInterupt+0x82>
				break;
 80012fc:	bf00      	nop
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000b0 	.word	0x200000b0
 8001308:	20000084 	.word	0x20000084
 800130c:	2000005c 	.word	0x2000005c

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f000 fa1b 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f821 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 f8a7 	bl	8001470 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001322:	f000 f859 	bl	80013d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <main+0x4c>)
 8001328:	f001 f970 	bl	800260c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const int sevenSegTimer=25;
 800132c:	2319      	movs	r3, #25
 800132e:	607b      	str	r3, [r7, #4]
  setTimer(0,sevenSegTimer);
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	2000      	movs	r0, #0
 8001334:	f000 f910 	bl	8001558 <setTimer>
  setTimer(1,15);
 8001338:	210f      	movs	r1, #15
 800133a:	2001      	movs	r0, #1
 800133c:	f000 f90c 	bl	8001558 <setTimer>
  setTimer(2,25);
 8001340:	2119      	movs	r1, #25
 8001342:	2002      	movs	r0, #2
 8001344:	f000 f908 	bl	8001558 <setTimer>
  setTimer(3,100);
 8001348:	2164      	movs	r1, #100	; 0x64
 800134a:	2003      	movs	r0, #3
 800134c:	f000 f904 	bl	8001558 <setTimer>
  init_for_automatic_leds();
 8001350:	f7fe ffd0 	bl	80002f4 <init_for_automatic_leds>
  while (1)
  {
	  fsm_for_input_processing();
 8001354:	f7ff f85a 	bl	800040c <fsm_for_input_processing>
 8001358:	e7fc      	b.n	8001354 <main+0x44>
 800135a:	bf00      	nop
 800135c:	200000d8 	.word	0x200000d8

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b090      	sub	sp, #64	; 0x40
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	2228      	movs	r2, #40	; 0x28
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fd08 	bl	8002d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001386:	2301      	movs	r3, #1
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138a:	2310      	movs	r3, #16
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800138e:	2300      	movs	r3, #0
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fd0c 	bl	8001db4 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013a2:	f000 f8d3 	bl	800154c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 ff78 	bl	80022b4 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013ca:	f000 f8bf 	bl	800154c <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3740      	adds	r7, #64	; 0x40
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM2_Init+0x94>)
 80013f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_TIM2_Init+0x94>)
 80013fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM2_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM2_Init+0x94>)
 800140c:	2209      	movs	r2, #9
 800140e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_TIM2_Init+0x94>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_TIM2_Init+0x94>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141c:	4813      	ldr	r0, [pc, #76]	; (800146c <MX_TIM2_Init+0x94>)
 800141e:	f001 f8a5 	bl	800256c <HAL_TIM_Base_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001428:	f000 f890 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_TIM2_Init+0x94>)
 800143a:	f001 fa3b 	bl	80028b4 <HAL_TIM_ConfigClockSource>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001444:	f000 f882 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM2_Init+0x94>)
 8001456:	f001 fc07 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001460:	f000 f874 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000d8 	.word	0x200000d8

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b29      	ldr	r3, [pc, #164]	; (800152c <MX_GPIO_Init+0xbc>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <MX_GPIO_Init+0xbc>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <MX_GPIO_Init+0xbc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <MX_GPIO_Init+0xbc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <MX_GPIO_Init+0xbc>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_GPIO_Init+0xbc>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80014b4:	2200      	movs	r2, #0
 80014b6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80014ba:	481d      	ldr	r0, [pc, #116]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014bc:	f000 fc49 	bl	8001d52 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_7SEG0_Pin|EN1_7SEG0_Pin
                          |EN0_7SEG1_Pin|EN1_7SEG1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_A1_Pin|P_B1_Pin|P_C1_Pin|P_D2_Pin
 80014c0:	2200      	movs	r2, #0
 80014c2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80014c6:	481b      	ldr	r0, [pc, #108]	; (8001534 <MX_GPIO_Init+0xc4>)
 80014c8:	f000 fc43 	bl	8001d52 <HAL_GPIO_WritePin>
                          |P_B2_Pin|P_C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin EN0_7SEG0_Pin EN1_7SEG0_Pin
                           EN0_7SEG1_Pin EN1_7SEG1_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80014cc:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80014d0:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN0_7SEG0_Pin|EN1_7SEG0_Pin
                          |EN0_7SEG1_Pin|EN1_7SEG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2302      	movs	r3, #2
 80014dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4619      	mov	r1, r3
 80014e4:	4812      	ldr	r0, [pc, #72]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014e6:	f000 faa3 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_A1_Pin P_B1_Pin P_C1_Pin P_D2_Pin
                           P_E2_Pin P_F2_Pin P_G2_Pin P_D1_Pin
                           P_E1_Pin P_F1_Pin P_G1_Pin P_A2_Pin
                           P_B2_Pin P_C2_Pin */
  GPIO_InitStruct.Pin = P_A1_Pin|P_B1_Pin|P_C1_Pin|P_D2_Pin
 80014ea:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80014ee:	60bb      	str	r3, [r7, #8]
                          |P_E2_Pin|P_F2_Pin|P_G2_Pin|P_D1_Pin
                          |P_E1_Pin|P_F1_Pin|P_G1_Pin|P_A2_Pin
                          |P_B2_Pin|P_C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2302      	movs	r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_GPIO_Init+0xc4>)
 8001504:	f000 fa94 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8001508:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800150c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4619      	mov	r1, r3
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_GPIO_Init+0xc0>)
 800151e:	f000 fa87 	bl	8001a30 <HAL_GPIO_Init>

}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	40010800 	.word	0x40010800
 8001534:	40010c00 	.word	0x40010c00

08001538 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001540:	f000 f822 	bl	8001588 <timerRun>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	e7fe      	b.n	8001554 <Error_Handler+0x8>
	...

08001558 <setTimer>:

#define TIMERNUM 10
int timer_counter[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};
int timer_flag[TIMERNUM]={0,0,0,0,0,0,0,0,0,0};

void setTimer(int INDEX,int duration){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	timer_counter[INDEX]=duration;
 8001562:	4907      	ldr	r1, [pc, #28]	; (8001580 <setTimer+0x28>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[INDEX]=0;
 800156c:	4a05      	ldr	r2, [pc, #20]	; (8001584 <setTimer+0x2c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2100      	movs	r1, #0
 8001572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000088 	.word	0x20000088
 8001584:	200000b0 	.word	0x200000b0

08001588 <timerRun>:

void timerRun(){
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
	for(int i=0;i<TIMERNUM;i++){
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	e01c      	b.n	80015ce <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <timerRun+0x58>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd13      	ble.n	80015c8 <timerRun+0x40>
			timer_counter[i]--;
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <timerRun+0x58>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <timerRun+0x58>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <=0){
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <timerRun+0x58>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dc04      	bgt.n	80015c8 <timerRun+0x40>
				timer_flag[i]=1;
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <timerRun+0x5c>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2101      	movs	r1, #1
 80015c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<TIMERNUM;i++){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	dddf      	ble.n	8001594 <timerRun+0xc>
			}
		}
	}
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000088 	.word	0x20000088
 80015e4:	200000b0 	.word	0x200000b0

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_MspInit+0x5c>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_MspInit+0x5c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_MspInit+0x5c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_MspInit+0x5c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_MspInit+0x5c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_MspInit+0x5c>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_MspInit+0x60>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_MspInit+0x60>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000

0800164c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800165c:	d113      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_TIM_Base_MspInit+0x44>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_TIM_Base_MspInit+0x44>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_TIM_Base_MspInit+0x44>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	201c      	movs	r0, #28
 800167c:	f000 f9a1 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001680:	201c      	movs	r0, #28
 8001682:	f000 f9ba 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f000 f87f 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM2_IRQHandler+0x10>)
 80016ea:	f000 ffdb 	bl	80026a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000d8 	.word	0x200000d8

080016f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001704:	f7ff fff8 	bl	80016f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001708:	480b      	ldr	r0, [pc, #44]	; (8001738 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800170a:	490c      	ldr	r1, [pc, #48]	; (800173c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800170c:	4a0c      	ldr	r2, [pc, #48]	; (8001740 <LoopFillZerobss+0x16>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001720:	4c09      	ldr	r4, [pc, #36]	; (8001748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172e:	f001 fb05 	bl	8002d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001732:	f7ff fded 	bl	8001310 <main>
  bx lr
 8001736:	4770      	bx	lr
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001740:	08002dd8 	.word	0x08002dd8
  ldr r2, =_sbss
 8001744:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001748:	20000124 	.word	0x20000124

0800174c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC1_2_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x28>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x28>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f923 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	200f      	movs	r0, #15
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff ff3c 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f93b 	bl	8001a16 <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f903 	bl	80019c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000034 	.word	0x20000034
 80017d4:	2000003c 	.word	0x2000003c
 80017d8:	20000038 	.word	0x20000038

080017dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_IncTick+0x1c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x20>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_IncTick+0x20>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	2000003c 	.word	0x2000003c
 80017fc:	20000120 	.word	0x20000120

08001800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <HAL_GetTick+0x10>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	20000120 	.word	0x20000120

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4906      	ldr	r1, [pc, #24]	; (80018ac <__NVIC_EnableIRQ+0x34>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f7ff ff90 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff2d 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff42 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff90 	bl	8001904 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5f 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff35 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa2 	bl	8001968 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b08b      	sub	sp, #44	; 0x2c
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	e148      	b.n	8001cd6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a44:	2201      	movs	r2, #1
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8137 	bne.w	8001cd0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4aa3      	ldr	r2, [pc, #652]	; (8001cf4 <HAL_GPIO_Init+0x2c4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d05e      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a6c:	4aa1      	ldr	r2, [pc, #644]	; (8001cf4 <HAL_GPIO_Init+0x2c4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d875      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001a72:	4aa1      	ldr	r2, [pc, #644]	; (8001cf8 <HAL_GPIO_Init+0x2c8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d058      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a78:	4a9f      	ldr	r2, [pc, #636]	; (8001cf8 <HAL_GPIO_Init+0x2c8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d86f      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001a7e:	4a9f      	ldr	r2, [pc, #636]	; (8001cfc <HAL_GPIO_Init+0x2cc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d052      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a84:	4a9d      	ldr	r2, [pc, #628]	; (8001cfc <HAL_GPIO_Init+0x2cc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d869      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001a8a:	4a9d      	ldr	r2, [pc, #628]	; (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d04c      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a90:	4a9b      	ldr	r2, [pc, #620]	; (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d863      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001a96:	4a9b      	ldr	r2, [pc, #620]	; (8001d04 <HAL_GPIO_Init+0x2d4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d046      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
 8001a9c:	4a99      	ldr	r2, [pc, #612]	; (8001d04 <HAL_GPIO_Init+0x2d4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d85d      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001aa2:	2b12      	cmp	r3, #18
 8001aa4:	d82a      	bhi.n	8001afc <HAL_GPIO_Init+0xcc>
 8001aa6:	2b12      	cmp	r3, #18
 8001aa8:	d859      	bhi.n	8001b5e <HAL_GPIO_Init+0x12e>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <HAL_GPIO_Init+0x80>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001b2b 	.word	0x08001b2b
 8001ab4:	08001b05 	.word	0x08001b05
 8001ab8:	08001b17 	.word	0x08001b17
 8001abc:	08001b59 	.word	0x08001b59
 8001ac0:	08001b5f 	.word	0x08001b5f
 8001ac4:	08001b5f 	.word	0x08001b5f
 8001ac8:	08001b5f 	.word	0x08001b5f
 8001acc:	08001b5f 	.word	0x08001b5f
 8001ad0:	08001b5f 	.word	0x08001b5f
 8001ad4:	08001b5f 	.word	0x08001b5f
 8001ad8:	08001b5f 	.word	0x08001b5f
 8001adc:	08001b5f 	.word	0x08001b5f
 8001ae0:	08001b5f 	.word	0x08001b5f
 8001ae4:	08001b5f 	.word	0x08001b5f
 8001ae8:	08001b5f 	.word	0x08001b5f
 8001aec:	08001b5f 	.word	0x08001b5f
 8001af0:	08001b5f 	.word	0x08001b5f
 8001af4:	08001b0d 	.word	0x08001b0d
 8001af8:	08001b21 	.word	0x08001b21
 8001afc:	4a82      	ldr	r2, [pc, #520]	; (8001d08 <HAL_GPIO_Init+0x2d8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b02:	e02c      	b.n	8001b5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e029      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	3304      	adds	r3, #4
 8001b12:	623b      	str	r3, [r7, #32]
          break;
 8001b14:	e024      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e01f      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	330c      	adds	r3, #12
 8001b26:	623b      	str	r3, [r7, #32]
          break;
 8001b28:	e01a      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b32:	2304      	movs	r3, #4
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e013      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	611a      	str	r2, [r3, #16]
          break;
 8001b4a:	e009      	b.n	8001b60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	615a      	str	r2, [r3, #20]
          break;
 8001b56:	e003      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x130>
          break;
 8001b5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2bff      	cmp	r3, #255	; 0xff
 8001b64:	d801      	bhi.n	8001b6a <HAL_GPIO_Init+0x13a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_Init+0x13e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2bff      	cmp	r3, #255	; 0xff
 8001b74:	d802      	bhi.n	8001b7c <HAL_GPIO_Init+0x14c>
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	e002      	b.n	8001b82 <HAL_GPIO_Init+0x152>
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	3b08      	subs	r3, #8
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	210f      	movs	r1, #15
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	401a      	ands	r2, r3
 8001b94:	6a39      	ldr	r1, [r7, #32]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8090 	beq.w	8001cd0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb0:	4b56      	ldr	r3, [pc, #344]	; (8001d0c <HAL_GPIO_Init+0x2dc>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a55      	ldr	r2, [pc, #340]	; (8001d0c <HAL_GPIO_Init+0x2dc>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <HAL_GPIO_Init+0x2dc>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bc8:	4a51      	ldr	r2, [pc, #324]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x2e4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_GPIO_Init+0x1e0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0x1dc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <HAL_GPIO_Init+0x2ec>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_GPIO_Init+0x1d8>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e004      	b.n	8001c12 <HAL_GPIO_Init+0x1e2>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x1e2>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_GPIO_Init+0x1e2>
 8001c10:	2300      	movs	r3, #0
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	f002 0203 	and.w	r2, r2, #3
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	4093      	lsls	r3, r2
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c22:	493b      	ldr	r1, [pc, #236]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4937      	ldr	r1, [pc, #220]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c4a:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4933      	ldr	r1, [pc, #204]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	492d      	ldr	r1, [pc, #180]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4929      	ldr	r1, [pc, #164]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4923      	ldr	r1, [pc, #140]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	491f      	ldr	r1, [pc, #124]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4919      	ldr	r1, [pc, #100]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4915      	ldr	r1, [pc, #84]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f47f aeaf 	bne.w	8001a44 <HAL_GPIO_Init+0x14>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	372c      	adds	r7, #44	; 0x2c
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	10320000 	.word	0x10320000
 8001cf8:	10310000 	.word	0x10310000
 8001cfc:	10220000 	.word	0x10220000
 8001d00:	10210000 	.word	0x10210000
 8001d04:	10120000 	.word	0x10120000
 8001d08:	10110000 	.word	0x10110000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40010800 	.word	0x40010800
 8001d18:	40010c00 	.word	0x40010c00
 8001d1c:	40011000 	.word	0x40011000
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e001      	b.n	8001d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d62:	787b      	ldrb	r3, [r7, #1]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d68:	887a      	ldrh	r2, [r7, #2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6e:	e003      	b.n	8001d78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e26c      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8087 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd4:	4b92      	ldr	r3, [pc, #584]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d00c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de0:	4b8f      	ldr	r3, [pc, #572]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d112      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
 8001dec:	4b8c      	ldr	r3, [pc, #560]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b89      	ldr	r3, [pc, #548]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x12c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d168      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e246      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x76>
 8001e1c:	4b80      	ldr	r3, [pc, #512]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a7f      	ldr	r2, [pc, #508]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e02e      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x98>
 8001e32:	4b7b      	ldr	r3, [pc, #492]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7a      	ldr	r2, [pc, #488]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b78      	ldr	r3, [pc, #480]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a77      	ldr	r2, [pc, #476]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0xbc>
 8001e56:	4b72      	ldr	r3, [pc, #456]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a71      	ldr	r2, [pc, #452]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xd4>
 8001e70:	4b6b      	ldr	r3, [pc, #428]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6a      	ldr	r2, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b68      	ldr	r3, [pc, #416]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a67      	ldr	r2, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fcb6 	bl	8001800 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fcb2 	bl	8001800 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1fa      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe4>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fca2 	bl	8001800 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fc9e 	bl	8001800 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1e6      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x10c>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d063      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eee:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x18c>
 8001f06:	4b46      	ldr	r3, [pc, #280]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x176>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1ba      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4939      	ldr	r1, [pc, #228]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	e03a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fc57 	bl	8001800 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff fc53 	bl	8001800 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e19b      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4927      	ldr	r1, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fc36 	bl	8001800 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f98:	f7ff fc32 	bl	8001800 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e17a      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03a      	beq.n	8002038 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fc16 	bl	8001800 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fc12 	bl	8001800 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e15a      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 fa9a 	bl	8002530 <RCC_Delay>
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_RCC_OscConfig+0x274>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002004:	f7ff fbfc 	bl	8001800 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200a:	e00f      	b.n	800202c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff fbf8 	bl	8001800 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d908      	bls.n	800202c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e140      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	42420000 	.word	0x42420000
 8002028:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	4b9e      	ldr	r3, [pc, #632]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e9      	bne.n	800200c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80a6 	beq.w	8002192 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204a:	4b97      	ldr	r3, [pc, #604]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10d      	bne.n	8002072 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	4b94      	ldr	r3, [pc, #592]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a93      	ldr	r2, [pc, #588]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b91      	ldr	r3, [pc, #580]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b8e      	ldr	r3, [pc, #568]	; (80022ac <HAL_RCC_OscConfig+0x4f8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d118      	bne.n	80020b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207e:	4b8b      	ldr	r3, [pc, #556]	; (80022ac <HAL_RCC_OscConfig+0x4f8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a8a      	ldr	r2, [pc, #552]	; (80022ac <HAL_RCC_OscConfig+0x4f8>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7ff fbb9 	bl	8001800 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002092:	f7ff fbb5 	bl	8001800 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0fd      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	4b81      	ldr	r3, [pc, #516]	; (80022ac <HAL_RCC_OscConfig+0x4f8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x312>
 80020b8:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a7a      	ldr	r2, [pc, #488]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	e02d      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x334>
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b73      	ldr	r3, [pc, #460]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a72      	ldr	r2, [pc, #456]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	e01c      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d10c      	bne.n	800210a <HAL_RCC_OscConfig+0x356>
 80020f0:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a6c      	ldr	r2, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a69      	ldr	r2, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e00b      	b.n	8002122 <HAL_RCC_OscConfig+0x36e>
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a66      	ldr	r2, [pc, #408]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6213      	str	r3, [r2, #32]
 8002116:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a63      	ldr	r2, [pc, #396]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d015      	beq.n	8002156 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff fb69 	bl	8001800 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff fb65 	bl	8001800 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0ab      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ee      	beq.n	8002132 <HAL_RCC_OscConfig+0x37e>
 8002154:	e014      	b.n	8002180 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff fb53 	bl	8001800 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff fb4f 	bl	8001800 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e095      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ee      	bne.n	800215e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a47      	ldr	r2, [pc, #284]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002190:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8081 	beq.w	800229e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219c:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d061      	beq.n	800226c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d146      	bne.n	800223e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_OscConfig+0x4fc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff fb23 	bl	8001800 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff fb1f 	bl	8001800 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e067      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d108      	bne.n	80021f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	492d      	ldr	r1, [pc, #180]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a19      	ldr	r1, [r3, #32]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	430b      	orrs	r3, r1
 800220a:	4927      	ldr	r1, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x4fc>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7ff faf3 	bl	8001800 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff faef 	bl	8001800 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e037      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x46a>
 800223c:	e02f      	b.n	800229e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_RCC_OscConfig+0x4fc>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fadc 	bl	8001800 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff fad8 	bl	8001800 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e020      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x498>
 800226a:	e018      	b.n	800229e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e013      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	429a      	cmp	r2, r3
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
 80022b0:	42420060 	.word	0x42420060

080022b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0d0      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d910      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	4965      	ldr	r1, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800231a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002332:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d040      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d115      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e073      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06b      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4936      	ldr	r1, [pc, #216]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7ff fa2c 	bl	8001800 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7ff fa28 	bl	8001800 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e053      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d210      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	4922      	ldr	r1, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1cc>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1d0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f98a 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	08002dac 	.word	0x08002dac
 8002480:	20000034 	.word	0x20000034
 8002484:	20000038 	.word	0x20000038

08002488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_GetSysClockFreq+0x94>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d002      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x30>
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d003      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x36>
 80024b6:	e027      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ba:	613b      	str	r3, [r7, #16]
      break;
 80024bc:	e027      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	0c9b      	lsrs	r3, r3, #18
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d010      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_GetSysClockFreq+0x94>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0c5b      	lsrs	r3, r3, #17
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ea:	fb02 f203 	mul.w	r2, r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e004      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a0c      	ldr	r2, [pc, #48]	; (800252c <HAL_RCC_GetSysClockFreq+0xa4>)
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	613b      	str	r3, [r7, #16]
      break;
 8002506:	e002      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	613b      	str	r3, [r7, #16]
      break;
 800250c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250e:	693b      	ldr	r3, [r7, #16]
}
 8002510:	4618      	mov	r0, r3
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	007a1200 	.word	0x007a1200
 8002524:	08002dbc 	.word	0x08002dbc
 8002528:	08002dcc 	.word	0x08002dcc
 800252c:	003d0900 	.word	0x003d0900

08002530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <RCC_Delay+0x34>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <RCC_Delay+0x38>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0a5b      	lsrs	r3, r3, #9
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800254c:	bf00      	nop
  }
  while (Delay --);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <RCC_Delay+0x1c>
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000034 	.word	0x20000034
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e041      	b.n	8002602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff f85a 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 fa6e 	bl	8002a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d001      	beq.n	8002624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e035      	b.n	8002690 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_TIM_Base_Start_IT+0x90>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_TIM_Base_Start_IT+0x4e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d004      	beq.n	800265a <HAL_TIM_Base_Start_IT+0x4e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <HAL_TIM_Base_Start_IT+0x94>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d111      	bne.n	800267e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b06      	cmp	r3, #6
 800266a:	d010      	beq.n	800268e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267c:	e007      	b.n	800268e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400

080026a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0202 	mvn.w	r2, #2
 80026d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9b4 	bl	8002a54 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f9a7 	bl	8002a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f9b6 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b04      	cmp	r3, #4
 800270c:	d122      	bne.n	8002754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b04      	cmp	r3, #4
 800271a:	d11b      	bne.n	8002754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0204 	mvn.w	r2, #4
 8002724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f98a 	bl	8002a54 <HAL_TIM_IC_CaptureCallback>
 8002740:	e005      	b.n	800274e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f97d 	bl	8002a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f98c 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b08      	cmp	r3, #8
 8002760:	d122      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b08      	cmp	r3, #8
 800276e:	d11b      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0208 	mvn.w	r2, #8
 8002778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2204      	movs	r2, #4
 800277e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f960 	bl	8002a54 <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f953 	bl	8002a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f962 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	d122      	bne.n	80027fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d11b      	bne.n	80027fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0210 	mvn.w	r2, #16
 80027cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2208      	movs	r2, #8
 80027d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f936 	bl	8002a54 <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f929 	bl	8002a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f938 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10e      	bne.n	8002828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0201 	mvn.w	r2, #1
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe fe88 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d107      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800284c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fa6b 	bl	8002d2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b40      	cmp	r3, #64	; 0x40
 8002860:	d10e      	bne.n	8002880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d107      	bne.n	8002880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8fc 	bl	8002a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b20      	cmp	r3, #32
 800288c:	d10e      	bne.n	80028ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b20      	cmp	r3, #32
 800289a:	d107      	bne.n	80028ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0220 	mvn.w	r2, #32
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fa36 	bl	8002d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIM_ConfigClockSource+0x1c>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e0b4      	b.n	8002a3a <HAL_TIM_ConfigClockSource+0x186>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002908:	d03e      	beq.n	8002988 <HAL_TIM_ConfigClockSource+0xd4>
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290e:	f200 8087 	bhi.w	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	f000 8086 	beq.w	8002a26 <HAL_TIM_ConfigClockSource+0x172>
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d87f      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b70      	cmp	r3, #112	; 0x70
 8002922:	d01a      	beq.n	800295a <HAL_TIM_ConfigClockSource+0xa6>
 8002924:	2b70      	cmp	r3, #112	; 0x70
 8002926:	d87b      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b60      	cmp	r3, #96	; 0x60
 800292a:	d050      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x11a>
 800292c:	2b60      	cmp	r3, #96	; 0x60
 800292e:	d877      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b50      	cmp	r3, #80	; 0x50
 8002932:	d03c      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xfa>
 8002934:	2b50      	cmp	r3, #80	; 0x50
 8002936:	d873      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d058      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x13a>
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	d86f      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b30      	cmp	r3, #48	; 0x30
 8002942:	d064      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b30      	cmp	r3, #48	; 0x30
 8002946:	d86b      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b20      	cmp	r3, #32
 800294a:	d060      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 800294c:	2b20      	cmp	r3, #32
 800294e:	d867      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d05c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002954:	2b10      	cmp	r3, #16
 8002956:	d05a      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002958:	e062      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f000 f95e 	bl	8002c2a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800297c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	609a      	str	r2, [r3, #8]
      break;
 8002986:	e04f      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f000 f947 	bl	8002c2a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029aa:	609a      	str	r2, [r3, #8]
      break;
 80029ac:	e03c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f000 f8be 	bl	8002b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2150      	movs	r1, #80	; 0x50
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f915 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 80029cc:	e02c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	461a      	mov	r2, r3
 80029dc:	f000 f8dc 	bl	8002b98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2160      	movs	r1, #96	; 0x60
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f905 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 80029ec:	e01c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f000 f89e 	bl	8002b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2140      	movs	r1, #64	; 0x40
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f8f5 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e00c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f000 f8ec 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 8002a1e:	e003      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e000      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <TIM_Base_SetConfig+0xa8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d007      	beq.n	8002ab4 <TIM_Base_SetConfig+0x28>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d003      	beq.n	8002ab4 <TIM_Base_SetConfig+0x28>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <TIM_Base_SetConfig+0xac>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d108      	bne.n	8002ac6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <TIM_Base_SetConfig+0xa8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <TIM_Base_SetConfig+0x52>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad4:	d003      	beq.n	8002ade <TIM_Base_SetConfig+0x52>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <TIM_Base_SetConfig+0xac>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d108      	bne.n	8002af0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <TIM_Base_SetConfig+0xa8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d103      	bne.n	8002b24 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	615a      	str	r2, [r3, #20]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400

08002b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 030a 	bic.w	r3, r3, #10
 8002b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f023 0210 	bic.w	r2, r3, #16
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	031b      	lsls	r3, r3, #12
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f043 0307 	orr.w	r3, r3, #7
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	609a      	str	r2, [r3, #8]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	021a      	lsls	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	609a      	str	r2, [r3, #8]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e041      	b.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d004      	beq.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400

08002d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <__libc_init_array>:
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	2600      	movs	r6, #0
 8002d40:	4d0c      	ldr	r5, [pc, #48]	; (8002d74 <__libc_init_array+0x38>)
 8002d42:	4c0d      	ldr	r4, [pc, #52]	; (8002d78 <__libc_init_array+0x3c>)
 8002d44:	1b64      	subs	r4, r4, r5
 8002d46:	10a4      	asrs	r4, r4, #2
 8002d48:	42a6      	cmp	r6, r4
 8002d4a:	d109      	bne.n	8002d60 <__libc_init_array+0x24>
 8002d4c:	f000 f822 	bl	8002d94 <_init>
 8002d50:	2600      	movs	r6, #0
 8002d52:	4d0a      	ldr	r5, [pc, #40]	; (8002d7c <__libc_init_array+0x40>)
 8002d54:	4c0a      	ldr	r4, [pc, #40]	; (8002d80 <__libc_init_array+0x44>)
 8002d56:	1b64      	subs	r4, r4, r5
 8002d58:	10a4      	asrs	r4, r4, #2
 8002d5a:	42a6      	cmp	r6, r4
 8002d5c:	d105      	bne.n	8002d6a <__libc_init_array+0x2e>
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d64:	4798      	blx	r3
 8002d66:	3601      	adds	r6, #1
 8002d68:	e7ee      	b.n	8002d48 <__libc_init_array+0xc>
 8002d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6e:	4798      	blx	r3
 8002d70:	3601      	adds	r6, #1
 8002d72:	e7f2      	b.n	8002d5a <__libc_init_array+0x1e>
 8002d74:	08002dd0 	.word	0x08002dd0
 8002d78:	08002dd0 	.word	0x08002dd0
 8002d7c:	08002dd0 	.word	0x08002dd0
 8002d80:	08002dd4 	.word	0x08002dd4

08002d84 <memset>:
 8002d84:	4603      	mov	r3, r0
 8002d86:	4402      	add	r2, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <memset+0xa>
 8002d8c:	4770      	bx	lr
 8002d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d92:	e7f9      	b.n	8002d88 <memset+0x4>

08002d94 <_init>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	bf00      	nop
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr

08002da0 <_fini>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr
